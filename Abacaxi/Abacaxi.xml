<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Abacaxi</name>
    </assembly>
    <members>
        <member name="T:Abacaxi.Aggregator`1">
            <summary>
                Defines a function that aggregates two values of a given type.
            </summary>
            <typeparam name="T">The type of values to aggregate.</typeparam>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
            <returns>The aggregated value.</returns>
        </member>
        <member name="T:Abacaxi.Containers.ArrayEqualityComparer`1">
            <summary>
                A class that provides array equality comparison (based on the array's elements).
            </summary>
            <typeparam name="TElement">The type of the elements in the arrays.</typeparam>
        </member>
        <member name="M:Abacaxi.Containers.ArrayEqualityComparer`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:Abacaxi.Containers.ArrayEqualityComparer`1" /> class.
            </summary>
            <param name="elementComparer">The element comparer.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="elementComparer" /> is <c>null</c>.</exception>
        </member>
        <member name="P:Abacaxi.Containers.ArrayEqualityComparer`1.Default">
            <summary>
                Gets the default equality comparer for the given array type.
            </summary>
            <value>
                The default equality comparer.
            </value>
        </member>
        <member name="M:Abacaxi.Containers.ArrayEqualityComparer`1.Equals(`0[],`0[])">
            <summary>
                Checks whether <paramref name="array1" /> and <paramref name="array2" /> are structurally equal.
            </summary>
            <param name="array1">The first array.</param>
            <param name="array2">The second array.</param>
            <returns><c>true</c> if the array contain the same elements; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Abacaxi.Containers.ArrayEqualityComparer`1.GetHashCode(`0[])">
            <summary>
                Calculates the hash code for a given <paramref name="array" />.
            </summary>
            <param name="array">The array.</param>
            <returns>
                A hash code for the array instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:Abacaxi.Containers.BitSet">
            <summary>
                Class implements an integer set internally represented by a bit array. Provides O(1) access times.
            </summary>
        </member>
        <member name="M:Abacaxi.Containers.BitSet.#ctor(System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of <see cref="T:Abacaxi.Containers.BitSet" /> class.
            </summary>
            <param name="min">The minimum value stored in the set.</param>
            <param name="max">The maximum value stored in the set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="min" /> is greater then <paramref name="max" />
                .
            </exception>
        </member>
        <member name="M:Abacaxi.Containers.BitSet.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of <see cref="T:Abacaxi.Containers.BitSet" /> class.
            </summary>
            <param name="count">The number of integers this set can hold (<c>0</c>...<paramref name="count" /><c>-1</c>)</param>
        </member>
        <member name="P:Abacaxi.Containers.BitSet.Count">
            <summary>
                The count of integers currently stored in the set.
            </summary>
        </member>
        <member name="P:Abacaxi.Containers.BitSet.IsReadOnly">
            <summary>
                Always returns <c>false</c>. The <see cref="T:Abacaxi.Containers.BitSet" /> is not read-only.
            </summary>
        </member>
        <member name="M:Abacaxi.Containers.BitSet.Add(System.Int32)">
            <summary>
                Adds an item to the set.
            </summary>
            <param name="item">The item to add.</param>
            <returns><c>true</c> if the item was added; <c>false</c> if the item was already in the set.</returns>
        </member>
        <member name="M:Abacaxi.Containers.BitSet.ExceptWith(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
                Removes all elements in the specified collection from the current set.
            </summary>
            <param name="other">The collection of items to remove from the set.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="other" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Abacaxi.Containers.BitSet.IntersectWith(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
                Modifies the current set so that it contains only elements that are also in a specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="other" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Abacaxi.Containers.BitSet.IsProperSubsetOf(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
                Determines whether the current set is a proper (strict) subset of a specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
                true if the current set is a proper subset of <paramref name="other" />; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="other" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Abacaxi.Containers.BitSet.IsProperSupersetOf(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
                Determines whether the current set is a proper (strict) superset of a specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
                true if the current set is a proper superset of <paramref name="other" />; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="other" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Abacaxi.Containers.BitSet.IsSubsetOf(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
                Determines whether the current set is a subset of a specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
                true if the current set is a subset of <paramref name="other" />; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="other" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Abacaxi.Containers.BitSet.IsSupersetOf(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
                Determines whether the current set is a superset of a specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
                true if the current set is a superset of <paramref name="other" />; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="other" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Abacaxi.Containers.BitSet.Overlaps(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
                Determines whether the current set overlaps with the specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
                true if the current set and <paramref name="other" /> share at least one common element; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="other" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Abacaxi.Containers.BitSet.SetEquals(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
                Determines whether the current set and the specified collection contain the same elements.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <returns>
                true if the current set is equal to <paramref name="other" />; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="other" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Abacaxi.Containers.BitSet.SymmetricExceptWith(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
                Modifies the current set so that it contains only elements that are present either in the current set or in the
                specified collection, but not both.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="other" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Abacaxi.Containers.BitSet.UnionWith(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
                Modifies the current set so that it contains all elements that are present in either the current set or the
                specified collection.
            </summary>
            <param name="other">The collection to compare to the current set.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="other" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Abacaxi.Containers.BitSet.System#Collections#Generic#ICollection{System#Int32}#Add(System.Int32)">
            <summary>
                Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:Abacaxi.Containers.BitSet.Clear">
            <summary>
                Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:Abacaxi.Containers.BitSet.Contains(System.Int32)">
            <summary>
                Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
                true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />;
                otherwise, false.
            </returns>
        </member>
        <member name="M:Abacaxi.Containers.BitSet.CopyTo(System.Int32[],System.Int32)">
            <summary>
                Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an
                <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">
                The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied
                from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have
                zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="array" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if the destination <paramref name="array" /> does not have enough
                space to hold the contents of the set.
            </exception>
        </member>
        <member name="M:Abacaxi.Containers.BitSet.Remove(System.Int32)">
            <summary>
                Removes the first occurrence of a specific object from the
                <see cref="T:System.Collections.Generic.ICollection{T}" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection{T}" />.</param>
            <returns>
                true if <paramref name="item" /> was successfully removed from the
                <see cref="T:System.Collections.Generic.ICollection{T}" />; otherwise, false. This method also returns false if
                <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="M:Abacaxi.Containers.BitSet.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
                A <see cref="T:System.Collections.Generic.IEnumerator{T}" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Abacaxi.Containers.BitSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
                An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Abacaxi.Containers.DisjointSet`1">
            <summary>
                Class implements the "union-find" data structure. This data structure is optimized for find and merge set
                operations.
                This class does not act as the standard set data structure. See
                https://en.wikipedia.org/wiki/Disjoint-set_data_structure for details.
            </summary>
        </member>
        <member name="M:Abacaxi.Containers.DisjointSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:Abacaxi.Containers.DisjointSet`1" /> class.
            </summary>
            <param name="comparer">The comparer.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="comparer" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Abacaxi.Containers.DisjointSet`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Abacaxi.Containers.DisjointSet`1" /> class using the default equality comparer for
                <typeparamref name="T" />.
            </summary>
        </member>
        <member name="P:Abacaxi.Containers.DisjointSet`1.Item(`0)">
            <summary>
                Gets the root object (called label) that identifies the sub-set that contains this <paramref name="object" />.
                If <paramref name="object" /> is not stored in this <see cref="T:Abacaxi.Containers.DisjointSet`1" />, it is added into its own set and
                the return value is itself.
            </summary>
            <value>
                The "set label" object.
            </value>
            <param name="object">The object to check.</param>
            <returns>The object which serves as the "set label".</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="object" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Abacaxi.Containers.DisjointSet`1.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the set.
            </summary>
            <returns>
                An enumerator that can be used to iterate through the set.
            </returns>
        </member>
        <member name="M:Abacaxi.Containers.DisjointSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the set.
            </summary>
            <returns>
                An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the set.
            </returns>
        </member>
        <member name="M:Abacaxi.Containers.DisjointSet`1.Merge(`0,`0[])">
            <summary>
                Merges the sets that contain the objects specified as input arguments and returns the "set label" object of the
                merged set.
                If only one argument is supplied, and it's not already in the set, a new set is created containing that single
                item.
            </summary>
            <param name="object">The first object.</param>
            <param name="otherObjects">The other objects.</param>
            <returns>The "set label" object that identifies the merged set.</returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="object" />,
                <paramref name="otherObjects" />, or its contents, are <c>null</c>.
            </exception>
        </member>
        <member name="M:Abacaxi.Containers.DisjointSet`1.CheckAndMerge(`0,`0)">
            <summary>
                Checks whether two objects are in the same sub-set. If the objects are in different sub-sets, they are merged.
            </summary>
            <param name="object1">The first object.</param>
            <param name="object2">The second object.</param>
            <returns><c>true</c> if the objects are in the same set already; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="object1" /> or <paramref name="object2" /> is
                <c>null</c>.
            </exception>
        </member>
        <member name="T:Abacaxi.Containers.Heap`1">
            <summary>
                Class implements the heap data structure, most commonly known as the "priority queue".
            </summary>
        </member>
        <member name="M:Abacaxi.Containers.Heap`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:Abacaxi.Containers.Heap`1" /> class.
            </summary>
            <param name="comparer">The comparer.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="comparer" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Abacaxi.Containers.Heap`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:Abacaxi.Containers.Heap`1" /> class.
            </summary>
            <param name="collection">The collection to add to the container..</param>
            <param name="comparer">The comparer.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="comparer" /> or <paramref name="collection" /> is
                <c>null</c>.
            </exception>
        </member>
        <member name="P:Abacaxi.Containers.Heap`1.Top">
            <summary>
                Gets the top of the heap.
            </summary>
            <value>
                The top element.
            </value>
            <exception cref="T:System.InvalidOperationException">The heap is empty.</exception>
        </member>
        <member name="P:Abacaxi.Containers.Heap`1.Count">
            <summary>
                Gets the number of elements contained in the <see cref="T:Abacaxi.Containers.Heap`1" />.
            </summary>
        </member>
        <member name="P:Abacaxi.Containers.Heap`1.IsReadOnly">
            <summary>
                Gets a value indicating whether the <see cref="T:Abacaxi.Containers.Heap`1" /> is read-only.
            </summary>
        </member>
        <member name="M:Abacaxi.Containers.Heap`1.Add(`0)">
            <summary>
                Adds an item to the <see cref="T:Abacaxi.Containers.Heap`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:Abacaxi.Containers.Heap`1" />.</param>
        </member>
        <member name="M:Abacaxi.Containers.Heap`1.Clear">
            <summary>
                Removes all items from the <see cref="T:Abacaxi.Containers.Heap`1" />.
            </summary>
        </member>
        <member name="M:Abacaxi.Containers.Heap`1.Contains(`0)">
            <summary>
                Determines whether the <see cref="T:Abacaxi.Containers.Heap`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Abacaxi.Containers.Heap`1" />.</param>
            <returns>
                true if <paramref name="item" /> is found in the <see cref="T:Abacaxi.Containers.Heap`1" />; otherwise, false.
            </returns>
        </member>
        <member name="M:Abacaxi.Containers.Heap`1.CopyTo(`0[],System.Int32)">
            <summary>
                Copies the elements of the <see cref="T:Abacaxi.Containers.Heap`1" /> to an <see cref="T:System.Array" />, starting at a particular
                <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">
                The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied
                from <see cref="T:Abacaxi.Containers.Heap`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="array" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if there is not enough space in the <paramref name="array" />.</exception>
        </member>
        <member name="M:Abacaxi.Containers.Heap`1.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
                A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Abacaxi.Containers.Heap`1.Remove(`0)">
            <summary>
                Removes the first occurrence of a specific object from the <see cref="T:Abacaxi.Containers.Heap`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:Abacaxi.Containers.Heap`1" />.</param>
            <returns>
                true if <paramref name="item" /> was successfully removed from the <see cref="T:Abacaxi.Containers.Heap`1" />; otherwise, false. This
                method also returns false if <paramref name="item" /> is not found in the original <see cref="T:Abacaxi.Containers.Heap`1" />.
            </returns>
        </member>
        <member name="M:Abacaxi.Containers.Heap`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
                An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Abacaxi.Containers.Heap`1.RemoveTop">
            <summary>
                Removes the top element in the <see cref="T:Abacaxi.Containers.Heap`1" />.
            </summary>
            <returns>The top element.</returns>
            <exception cref="T:System.InvalidOperationException">The heap is empty.</exception>
        </member>
        <member name="T:Abacaxi.Containers.Mash`2">
            <summary>
                Class implements a Dictionary of Dictionaries plus List and such. Serves as a Swiss army knife container that can
                be used to store anything.
            </summary>
        </member>
        <member name="M:Abacaxi.Containers.Mash`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:Abacaxi.Containers.Mash`2" /> class.
            </summary>
            <param name="equalityComparer">The equality comparer used for sub-mash indexing.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="equalityComparer" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Abacaxi.Containers.Mash`2.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Abacaxi.Containers.Mash`2" /> class using the default
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.
            </summary>
        </member>
        <member name="P:Abacaxi.Containers.Mash`2.Value">
            <summary>
                Gets or sets the value stored by this <see cref="T:Abacaxi.Containers.Mash`2" />.
            </summary>
            <value>
                The value stored by this mash.
            </value>
            <remarks>
                The <see cref="T:Abacaxi.Containers.Mash`2" /> allows for storage of collection of items. The <see cref="P:Abacaxi.Containers.Mash`2.Value" /> property
                acts as a simplified way to access the element with zero-index in this collection. If the collection is empty and a
                setter
                is accessed, the value is added into collection. Given how the <see cref="T:Abacaxi.Containers.Mash`2" /> class stores the
                value collection,
                use the <see cref="P:Abacaxi.Containers.Mash`2.Value" /> property if you only need to store one element in the <see cref="T:Abacaxi.Containers.Mash`2" />
                .
            </remarks>
        </member>
        <member name="P:Abacaxi.Containers.Mash`2.Item(`0)">
            <summary>
                Gets the linked <see cref="T:Abacaxi.Containers.Mash`2" /> with the specified key.
            </summary>
            <value>
                The linked <see cref="T:Abacaxi.Containers.Mash`2" /> associated with the given key.
            </value>
            <remarks>
                This indexer is equivalent to <see cref="M:Abacaxi.Containers.Mash`2.GetLinked(`0)" /> method.
            </remarks>
            <param name="key">The key.</param>
            <returns>The child <see cref="T:Abacaxi.Containers.Mash`2" />.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="key" /> is <c>null</c>.</exception>
        </member>
        <member name="P:Abacaxi.Containers.Mash`2.LinkedCount">
            <summary>
                Gets the count of linked <see cref="T:Abacaxi.Containers.Mash`2" />s referenced by this instance.
            </summary>
            <value>
                The count of linked <see cref="T:Abacaxi.Containers.Mash`2" />s.
            </value>
        </member>
        <member name="M:Abacaxi.Containers.Mash`2.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the values stored in this <see cref="T:Abacaxi.Containers.Mash`2" />.
            </summary>
            <returns>
                An enumerator that can be used to iterate through the collection.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Abacaxi.Containers.Mash`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the values stored in this <see cref="T:Abacaxi.Containers.Mash`2" />.
            </summary>
            <returns>
                An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Abacaxi.Containers.Mash`2.Add(`1)">
            <summary>
                Adds an item to the <see cref="T:Abacaxi.Containers.Mash`2" />'s value collection.
            </summary>
            <param name="item">The object to add to this <see cref="T:Abacaxi.Containers.Mash`2" />.</param>
        </member>
        <member name="M:Abacaxi.Containers.Mash`2.Clear">
            <summary>
                Removes all items from the this <see cref="T:Abacaxi.Containers.Mash`2" />'s value collection.
            </summary>
        </member>
        <member name="M:Abacaxi.Containers.Mash`2.Contains(`1)">
            <summary>
                Determines whether the <see cref="T:Abacaxi.Containers.Mash`2" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the mash.</param>
            <returns>
                <c>true</c> if <paramref name="item" /> is found in the <see cref="T:Abacaxi.Containers.Mash`2" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Abacaxi.Containers.Mash`2.CopyTo(`1[],System.Int32)">
            <summary>
                Copies the elements of the <see cref="T:Abacaxi.Containers.Mash`2" />'s value collection to an <see cref="T:System.Array" />,
                starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">
                The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied
                from <see cref="T:Abacaxi.Containers.Mash`2" />. The <see cref="T:System.Array" /> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="array" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if the destination <paramref name="array" /> does not have enough
                space to hold the contents of the set.
            </exception>
        </member>
        <member name="M:Abacaxi.Containers.Mash`2.Remove(`1)">
            <summary>
                Removes the first occurrence of a specific object from the <see cref="T:Abacaxi.Containers.Mash`2" />'s value collection.
            </summary>
            <param name="item">The object to remove from the value collection.</param>
            <returns>
                <c>true</c> if <paramref name="item" /> was successfully removed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Abacaxi.Containers.Mash`2.Count">
            <summary>
                Gets the number of elements contained in the <see cref="T:Abacaxi.Containers.Mash`2" />'s value collection.
            </summary>
        </member>
        <member name="P:Abacaxi.Containers.Mash`2.IsReadOnly">
            <summary>
                Gets a value indicating whether the <see cref="T:Abacaxi.Containers.Mash`2" /> is read-only.
            </summary>
            <value>
                This property is always <c>false</c>.
            </value>
        </member>
        <member name="M:Abacaxi.Containers.Mash`2.IndexOf(`1)">
            <summary>
                Determines the index of a specific item in the <see cref="T:Abacaxi.Containers.Mash`2" />'s value collection.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Abacaxi.Containers.Mash`2" />'s value collection.</param>
            <returns>
                The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Abacaxi.Containers.Mash`2.Insert(System.Int32,`1)">
            <summary>
                Inserts an item to the <see cref="T:Abacaxi.Containers.Mash`2" />'s value collection at the specified
                <paramref name="index" />.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:Abacaxi.Containers.Mash`2" />'s value collection.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index" /> is out of bounds.</exception>
        </member>
        <member name="M:Abacaxi.Containers.Mash`2.RemoveAt(System.Int32)">
            <summary>
                Removes the <see cref="T:Abacaxi.Containers.Mash`2" />'s item at the specified <paramref name="index" />.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index" /> is out of bounds.</exception>
        </member>
        <member name="P:Abacaxi.Containers.Mash`2.Item(System.Int32)">
            <summary>
                Gets or sets the value in the <see cref="T:Abacaxi.Containers.Mash`2" />'s value collection at the specified
                <paramref name="index" />.
            </summary>
            <value>
                The value at the specified index.
            </value>
            <param name="index">The index.</param>
            <returns>The value stored in the <see cref="T:Abacaxi.Containers.Mash`2" />'s value collection at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index" /> is out of bounds.</exception>
        </member>
        <member name="M:Abacaxi.Containers.Mash`2.GetLinked(`0)">
            <summary>
                Gets the linked <see cref="T:Abacaxi.Containers.Mash`2" /> with the specified key.
            </summary>
            <remarks>
                This method serves as an alternative to the indexer in cases when <typeparamref name="TKey" /> and
                <typeparamref name="TValue" />
                are of the same type (and method overloading fails).
            </remarks>
            <param name="key">The key.</param>
            <returns>The linked <see cref="T:Abacaxi.Containers.Mash`2" />.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="key" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Abacaxi.Containers.Mash`2.Link(`0,Abacaxi.Containers.Mash{`0,`1})">
            <summary>
                Links a given <paramref name="mash" /> with this <see cref="T:Abacaxi.Containers.Mash`2" /> using the supplied
                <paramref name="key" />.
            </summary>
            <param name="key">The key.</param>
            <param name="mash">The mash to link.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="key" /> or <paramref name="mash" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Abacaxi.Containers.Mash`2.Unlink(`0)">
            <summary>
                Un-links the <see cref="T:Abacaxi.Containers.Mash`2" /> with the specified key from this <see cref="T:Abacaxi.Containers.Mash`2" />.
            </summary>
            <param name="key">The key of the <see cref="T:Abacaxi.Containers.Mash`2" /> to un-link.</param>
            <returns><c>true</c> if the mash was un-linked; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="key" /> is <c>null</c>.</exception>
        </member>
        <member name="T:Abacaxi.Containers.SingleLinkedNode`1">
            <summary>
                Represents a linked list node.
            </summary>
            <typeparam name="T">The type of the value stored in the node.</typeparam>
        </member>
        <member name="M:Abacaxi.Containers.SingleLinkedNode`1.#ctor(`0)">
            <summary>
                Initializes a new instance of <see cref="T:Abacaxi.Containers.SingleLinkedNode`1" /> class with a given value.
            </summary>
            <param name="value">The node's value.</param>
        </member>
        <member name="P:Abacaxi.Containers.SingleLinkedNode`1.Value">
            <summary>
                The node's value.
            </summary>
        </member>
        <member name="P:Abacaxi.Containers.SingleLinkedNode`1.Next">
            <summary>
                Next element in the list.
            </summary>
        </member>
        <member name="M:Abacaxi.Containers.SingleLinkedNode`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
                An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Abacaxi.Containers.SingleLinkedNode`1.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
                An enumerator that can be used to iterate through the collection.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Abacaxi.Containers.SingleLinkedNode`1.Create(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Creates a new linked list from a given <paramref name="sequence" />.
            </summary>
            <param name="sequence">The sequence to convert into a linked list.</param>
            <returns>The first node in the list (head).</returns>
        </member>
        <member name="M:Abacaxi.Containers.SingleLinkedNode`1.FindMiddle">
            <summary>
                Find the middle node of a linked list.
            </summary>
            <remarks>This method does not check for knotted lists. A knotted list will force this method to execute indefinitely.</remarks>
            <returns>The middle node.</returns>
        </member>
        <member name="M:Abacaxi.Containers.SingleLinkedNode`1.VerifyIfKnotted">
            <summary>
                Finds whether the list is knotted.
            </summary>
            <returns><c>true</c> if the list is knotted; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Abacaxi.Containers.SingleLinkedNode`1.Reverse">
            <summary>
                Reverses a given linked list using the iterative method.
            </summary>
            <remarks>This method does not check for knotted lists. A knotted list will force this method to execute indefinitely.</remarks>
            <returns>The new head of the linked list.</returns>
        </member>
        <member name="T:Abacaxi.Containers.Trie`2">
            <summary>
                Class implements a "trie" data structure, perfectly suited for fast string matching.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TElement">The element of array keys.</typeparam>
        </member>
        <member name="M:Abacaxi.Containers.Trie`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
                Initializes a new instance of <see cref="T:Abacaxi.Containers.Trie`2" /> class.
            </summary>
            <param name="comparer">The element comparer.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="comparer" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Abacaxi.Containers.Trie`2.#ctor">
            <summary>
                Initializes a new instance of <see cref="T:Abacaxi.Containers.Trie`2" /> class.
            </summary>
        </member>
        <member name="M:Abacaxi.Containers.Trie`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0[],`1}},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
                Initializes a new instance of <see cref="T:Abacaxi.Containers.Trie`2" /> class.
            </summary>
            <param name="sequence">Ane existing collection of key/value pairs to store in the trie.</param>
            <param name="comparer">The element comparer.</param>
            <exception cref="T:System.ArgumentException">Thrown if the <paramref name="sequence" /> contains duplicate keys.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="sequence" /> contains <c>null</c> keys.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="sequence" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Abacaxi.Containers.Trie`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0[],`1}})">
            <summary>
                Initializes a new instance of <see cref="T:Abacaxi.Containers.Trie`2" /> class.
            </summary>
            <param name="sequence">Ane existing collection of key/value pairs to store in the trie.</param>
            <exception cref="T:System.ArgumentException">Thrown if the <paramref name="sequence" /> contains duplicate keys.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="sequence" /> contains <c>null</c> keys.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="sequence" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Abacaxi.Containers.Trie`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
                An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Abacaxi.Containers.Trie`2.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
                An enumerator that can be used to iterate through the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">Collection has been modified while enumerating.</exception>
        </member>
        <member name="M:Abacaxi.Containers.Trie`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TElement[],TValue}}#Add(System.Collections.Generic.KeyValuePair{`0[],`1})">
            <summary>
                Adds an item to the <see cref="T:Abacaxi.Containers.Trie`2" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:Abacaxi.Containers.Trie`2" />.</param>
            <exception cref="T:System.ArgumentException">The key component of <paramref name="item" /> is already present in the collection.</exception>
            <exception cref="T:System.ArgumentNullException">The key component of <paramref name="item" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Abacaxi.Containers.Trie`2.Clear">
            <summary>
                Removes all items from the <see cref="T:Abacaxi.Containers.Trie`2" />.
            </summary>
        </member>
        <member name="M:Abacaxi.Containers.Trie`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TElement[],TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0[],`1})">
            <summary>
                Determines whether the <see cref="T:Abacaxi.Containers.Trie`2" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Abacaxi.Containers.Trie`2" />.</param>
            <returns>
                true if <paramref name="item" /> is found in the <see cref="T:Abacaxi.Containers.Trie`2" />; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">The key component of <paramref name="item" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Abacaxi.Containers.Trie`2.CopyTo(System.Collections.Generic.KeyValuePair{`0[],`1}[],System.Int32)">
            <summary>
                Copies the elements of the <see cref="T:Abacaxi.Containers.Trie`2" /> to an <see cref="T:System.Array" />, starting at a
                particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">
                The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied
                from <see cref="T:Abacaxi.Containers.Trie`2" />. The <see cref="T:System.Array" /> must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="array" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="arrayIndex" /> is out of bounds or there is not
                enough space in the array.
            </exception>
        </member>
        <member name="M:Abacaxi.Containers.Trie`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TElement[],TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0[],`1})">
            <summary>
                Removes the specified key/value pair from the <see cref="T:Abacaxi.Containers.Trie`2" />.
            </summary>
            <param name="item">The key/value pair to remove.</param>
            <returns><c>true</c> if the key/value pair was found and removed; <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the key component of <paramref name="item" /> is <c>null</c>.</exception>
        </member>
        <member name="P:Abacaxi.Containers.Trie`2.Count">
            <summary>
                Gets the number of elements contained in the <see cref="T:Abacaxi.Containers.Trie`2" />.
            </summary>
        </member>
        <member name="P:Abacaxi.Containers.Trie`2.IsReadOnly">
            <summary>
                Gets a value indicating whether the <see cref="T:Abacaxi.Containers.Trie`2" /> is read-only.
            </summary>
        </member>
        <member name="M:Abacaxi.Containers.Trie`2.Query(`0[])">
            <summary>
                Queries this <see cref="T:Abacaxi.Containers.Trie`2" /> for all key/value pairs that start with a given
                <paramref name="prefix" />.
            </summary>
            <param name="prefix">The prefix to query.</param>
            <returns>The sequence of all key/value pairs that share the given <paramref name="prefix" />.</returns>
            <exception cref="T:System.InvalidOperationException">Collection has been modified while enumerating.</exception>
        </member>
        <member name="M:Abacaxi.Containers.Trie`2.Add(`0[],`1)">
            <summary>
                Adds the specified key/value pair into the <see cref="T:Abacaxi.Containers.Trie`2" />.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="key" /> is already present in the collection.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Abacaxi.Containers.Trie`2.AddOrUpdate(`0[],`1,System.Func{`1,`1})">
            <summary>
                Adds a new, or updates and existing element.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="updateFunc">The update function.</param>
            <returns><c>true</c> if the key/value was added; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="key" /> or <paramref name="updateFunc" /> are
                <c>null</c>.
            </exception>
        </member>
        <member name="M:Abacaxi.Containers.Trie`2.Contains(`0[])">
            <summary>
                Determines whether this <see cref="T:Abacaxi.Containers.Trie`2" /> contains the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>
                <c>true</c> if the <see cref="T:Abacaxi.Containers.Trie`2" /> contains the specified key; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Abacaxi.Containers.Trie`2.Remove(`0[])">
            <summary>
                Removes the specified key (and the associated value) from the <see cref="T:Abacaxi.Containers.Trie`2" />.
            </summary>
            <param name="key">The key to remove.</param>
            <returns><c>true</c> if the key was found and removed; <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="key" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Abacaxi.Containers.Trie`2.TryGetValue(`0[],`1@)">
            <summary>
                Tries to get the value associated with the <paramref name="key" />.
            </summary>
            <param name="key">The key.</param>
            <param name="result">The output value.</param>
            <returns><c>true</c> if the key was found; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Abacaxi.Edit`1">
            <summary>
                Represents an unique "edit" step in a sequence transformation. See <seealso cref="M:Abacaxi.SequenceExtensions.Diff``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})" />
                for more details.
            </summary>
            <typeparam name="T">The type of elements being edited.</typeparam>
        </member>
        <member name="P:Abacaxi.Edit`1.Operation">
            <summary>
                Gets the edit operation type.
            </summary>
            <value>
                The operation type.
            </value>
        </member>
        <member name="P:Abacaxi.Edit`1.Item">
            <summary>
                Gets the transformation item associated with the <see cref="P:Abacaxi.Edit`1.Operation" />.
            </summary>
            <value>
                The item.
            </value>
        </member>
        <member name="M:Abacaxi.Edit`1.#ctor(Abacaxi.EditOperation,`0)">
            <summary>
                Initializes a new instance of the <see cref="T:Abacaxi.Edit`1" /> struct.
            </summary>
            <param name="operation">The edit operation.</param>
            <param name="item">The edit item.</param>
        </member>
        <member name="M:Abacaxi.Edit`1.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Abacaxi.Edit`1.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Abacaxi.Edit`1.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:Abacaxi.EditOperation">
            <summary>
                Defines the allowed set of edit operations used by the <seealso cref="M:Abacaxi.SequenceExtensions.Diff``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})" /> method.
            </summary>
        </member>
        <member name="F:Abacaxi.EditOperation.Match">
            <summary>
                Items from both sequences match at given location.
            </summary>
        </member>
        <member name="F:Abacaxi.EditOperation.Substitute">
            <summary>
                An item from a given location in the original sequence is substituted with an item in the result sequence.
            </summary>
        </member>
        <member name="F:Abacaxi.EditOperation.Insert">
            <summary>
                An item is inserted into the original sequence at a given location to match the result sequence.
            </summary>
        </member>
        <member name="F:Abacaxi.EditOperation.Delete">
            <summary>
                An item is removed from the original sequence at a given location to match the result sequence.
            </summary>
        </member>
        <member name="T:Abacaxi.FibonacciSequence">
            <summary>
                Class supplies methods related to the "Fibonacci sequence".
            </summary>
        </member>
        <member name="M:Abacaxi.FibonacciSequence.Enumerate(System.Int32)">
            <summary>
                Enumerates the first <paramref name="count" /> Fibonacci numbers.
            </summary>
            <param name="count">The count of Fibonacci "numbers" to enumerate.</param>
            <returns>The Fibonacci sequence.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="count" /> is less than zero.</exception>
        </member>
        <member name="M:Abacaxi.FibonacciSequence.GetMember(System.Int32)">
            <summary>
                Gets the Nth Fibonacci number.
            </summary>
            <param name="index">The index of the Fibonacci number to calculate.</param>
            <returns>The Fibonacci number</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="index" /> is less than zero.</exception>
        </member>
        <member name="T:Abacaxi.Frequency`1">
            <summary>
                Stores the number of times a certain item appears in a collection.
            </summary>
            <typeparam name="T">Te type of elements in collection.</typeparam>
        </member>
        <member name="P:Abacaxi.Frequency`1.Item">
            <summary>
                Gets the item that is being counted.
            </summary>
            <value>
                The item.
            </value>
        </member>
        <member name="P:Abacaxi.Frequency`1.Count">
            <summary>
                Gets the number of appearances.
            </summary>
            <value>
                The count.
            </value>
        </member>
        <member name="M:Abacaxi.Frequency`1.#ctor(`0,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Abacaxi.Frequency`1" /> struct.
            </summary>
            <param name="item">The item being counted.</param>
            <param name="count">The number of appearances.</param>
        </member>
        <member name="M:Abacaxi.Frequency`1.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Abacaxi.Frequency`1.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Abacaxi.Frequency`1.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:Abacaxi.GlobPattern">
            <summary>
                Class implements the "glob-style" pattern matching.
            </summary>
        </member>
        <member name="M:Abacaxi.GlobPattern.#ctor(System.String,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Abacaxi.GlobPattern" /> class.
            </summary>
            <param name="pattern">The glob-style pattern.</param>
            <param name="ignoreCase">Supply a value of <c>true</c> to make the pattern case insensitive.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="pattern" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Abacaxi.GlobPattern.IsMatch(System.String)">
            <summary>
                Determines whether the specified string matches this pattern.
            </summary>
            <param name="s">The string to check.</param>
            <returns>
                <c>true</c> if the specified string matches the pattern; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="s" /> is <c>null</c>.</exception>
        </member>
        <member name="T:Abacaxi.Graphs.Cell">
            <summary>
                Defines a 2-D coordinate to be used when manipulating matrices.
            </summary>
        </member>
        <member name="P:Abacaxi.Graphs.Cell.X">
            <summary>
                Gets the X coordinate.
            </summary>
            <value>
                The X coordinate.
            </value>
        </member>
        <member name="P:Abacaxi.Graphs.Cell.Y">
            <summary>
                Gets the Y coordinate.
            </summary>
            <value>
                The Y coordinate.
            </value>
        </member>
        <member name="M:Abacaxi.Graphs.Cell.#ctor(System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Abacaxi.Graphs.Cell" /> struct.
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
        </member>
        <member name="M:Abacaxi.Graphs.Cell.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Abacaxi.Graphs.Cell.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Abacaxi.Graphs.Cell.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Abacaxi.Graphs.Edge`1">
            <summary>
                Defines a weighted edge connecting two graph vertices.
                <typeparam name="TVertex">The type of the vertex.</typeparam>
            </summary>
        </member>
        <member name="M:Abacaxi.Graphs.Edge`1.#ctor(`0,`0,System.Double)">
            <summary>
                Initializes a new instance of the <see cref="T:Abacaxi.Graphs.Edge`1" /> struct.
            </summary>
            <param name="fromVertex">The first vertex.</param>
            <param name="toVertex">The second vertex.</param>
            <param name="weight">The weight of the edge.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="weight" /> is less than zero.</exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="fromVertex" /> or <paramref name="toVertex" /> is
                <c>null</c>.
            </exception>
        </member>
        <member name="P:Abacaxi.Graphs.Edge`1.FromVertex">
            <summary>
                Gets the starting vertex.
            </summary>
            <value>
                From starting vertex.
            </value>
        </member>
        <member name="P:Abacaxi.Graphs.Edge`1.ToVertex">
            <summary>
                Gets the connected vertex.
            </summary>
            <value>
                The connected vertex.
            </value>
        </member>
        <member name="P:Abacaxi.Graphs.Edge`1.Weight">
            <summary>
                Gets the edge's weight.
            </summary>
            <value>
                The edge's weight.
            </value>
        </member>
        <member name="M:Abacaxi.Graphs.Edge`1.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Abacaxi.Graphs.Edge`1.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Abacaxi.Graphs.Edge`1.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Abacaxi.Graphs.Graph`1">
            <summary>
                Generic graph class. This class serves as an abstract base for all concrete implementations.
            </summary>
            <typeparam name="TVertex">The type of graph vertices.</typeparam>
        </member>
        <member name="P:Abacaxi.Graphs.Graph`1.IsDirected">
            <summary>
                Gets a value indicating whether this graph's edges are directed.
            </summary>
            <value>
                <c>true</c> if this graph's edges are directed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Abacaxi.Graphs.Graph`1.IsReadOnly">
            <summary>
                Gets a value indicating whether this instance is read only.
            </summary>
            <value>
                <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Abacaxi.Graphs.Graph`1.SupportsPotentialWeightEvaluation">
            <summary>
                Gets a value indicating whether this graph supports potential weight evaluation (heuristics).
            </summary>
            <value>
                <c>true</c> if graph supports potential weight evaluation; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Abacaxi.Graphs.Graph`1.IsBipartite">
            <summary>
                Verifies the current graph is bipartite.
            </summary>
            <value>
                <c>true</c> if this instance is bipartite; otherwise, <c>false</c>.
            </value>
            <exception cref="T:System.InvalidOperationException">Thrown if the graph is directed.</exception>
        </member>
        <member name="M:Abacaxi.Graphs.Graph`1.GetEnumerator">
            <summary>
                Returns an enumerator that iterates all vertices in the graph.
            </summary>
            <returns>
                A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Abacaxi.Graphs.Graph`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
                An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Abacaxi.Graphs.Graph`1.RequireUndirectedGraph">
            <summary>
                Asserts this graph is undirected.
            </summary>
            <exception cref="T:System.InvalidOperationException">This operation is not allowed on directed graphs.</exception>
        </member>
        <member name="M:Abacaxi.Graphs.Graph`1.GetPotentialWeight(`0,`0)">
            <summary>
                Gets the potential total weight connecting <paramref name="fromVertex" /> and <paramref name="toVertex" />
                vertices.
            </summary>
            <param name="fromVertex">The first vertex.</param>
            <param name="toVertex">The destination vertex.</param>
            <returns>The potential total cost.</returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="fromVertex" /> or <paramref name="toVertex" /> is
                <c>null</c>.
            </exception>
        </member>
        <member name="M:Abacaxi.Graphs.Graph`1.GetEdges(`0)">
            <summary>
                Gets the edges for a given <paramref name="vertex" />.
            </summary>
            <param name="vertex">The vertex to get the edges for.</param>
            <returns>A sequence of edges connected to the given <paramref name="vertex" /></returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="vertex" /> is not part of this graph.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="vertex" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Abacaxi.Graphs.Graph`1.TraverseBfs(`0,System.Predicate{Abacaxi.Graphs.Graph{`0}.IBfsNode})">
            <summary>
                Traverses the graph using the breadth-first-search starting from <paramref name="startVertex" />.
            </summary>
            <param name="startVertex">The start vertex.</param>
            <param name="handleVertexCompleted">The function called when a vertex is completed.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="startVertex" /> or
                <paramref name="handleVertexCompleted" /> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="startVertex" /> is not part of this graph.</exception>
        </member>
        <member name="M:Abacaxi.Graphs.Graph`1.TraverseDfs(`0,System.Predicate{Abacaxi.Graphs.Graph{`0}.IDfsNode},System.Predicate{Abacaxi.Graphs.Graph{`0}.IDfsNode},System.Func{Abacaxi.Graphs.Graph{`0}.IDfsNode,Abacaxi.Graphs.Graph{`0}.IDfsNode,System.Boolean})">
            <summary>
                Traverses the graph using the depth-first-search starting from <paramref name="startVertex" />.
            </summary>
            <param name="startVertex">The start vertex.</param>
            <param name="handleVertexVisited">The function called when a vertex is being visited.</param>
            <param name="handleVertexCompleted">The function called when a vertex is completed.</param>
            <param name="handleCycle">The function called when a cycle is identified.</param>
            <exception cref="T:System.ArgumentNullException">
                The <paramref name="handleVertexVisited" />, <paramref name="handleVertexCompleted" />,
                <paramref name="handleCycle" /> or <paramref name="startVertex" /> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">The <paramref name="startVertex" /> is not part of this graph.</exception>
        </member>
        <member name="M:Abacaxi.Graphs.Graph`1.FillWithOneColor(`0,System.Action{`0})">
            <summary>
                Fills the graph with one color.
            </summary>
            <param name="startVertex">The start vertex.</param>
            <param name="applyColor">Color to apply to each vertex.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="applyColor" /> or <paramref name="startVertex" /> is
                <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="startVertex" /> is not part of this graph.</exception>
        </member>
        <member name="M:Abacaxi.Graphs.Graph`1.FindShortestPath(`0,`0)">
            <summary>
                Finds the shortest path between two vertices in a graph.
            </summary>
            <param name="startVertex">The start vertex.</param>
            <param name="endVertex">The end vertex.</param>
            <returns>Returns a sequence of vertices in visitation order.</returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="startVertex" /> or <paramref name="endVertex" /> is
                <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="startVertex" /> is not part of this graph.</exception>
        </member>
        <member name="M:Abacaxi.Graphs.Graph`1.GetComponents">
            <summary>
                Gets all connected components in a given undirected graph.
            </summary>
            <returns>A sequence of sub-graphs, each representing a connected component.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the graph is directed.</exception>
        </member>
        <member name="M:Abacaxi.Graphs.Graph`1.TopologicalSort">
            <summary>
                Sorts a directed acyclic graph in topological order.
            </summary>
            <returns>A sequence of vertices sorted in topological order.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the graph is undirected or contains one or more cycles.</exception>
        </member>
        <member name="M:Abacaxi.Graphs.Graph`1.FindAllArticulationVertices">
            <summary>
                Finds all articulation vertices in the given graph.
            </summary>
            <returns>A sequence of all articulation vertices.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the graph is directed.</exception>
        </member>
        <member name="M:Abacaxi.Graphs.Graph`1.DescribeVertices">
            <summary>
                Describes the vertices of graph (degrees and components).
            </summary>
            <returns>A list of vertex descriptions.</returns>
        </member>
        <member name="M:Abacaxi.Graphs.Graph`1.FindCheapestPath(`0,`0)">
            <summary>
                Finds the cheapest path in a graph between two vertices <paramref name="startVertex" /> and
                <paramref name="endVertex" />
            </summary>
            <param name="startVertex">The start vertex.</param>
            <param name="endVertex">The end vertex.</param>
            <returns>A sequence of vertices that yield the shortest path. Returns an empty sequence if no path available.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="startVertex" /> is not part of teh graph.</exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="startVertex" /> or <paramref name="endVertex" /> is
                <c>null</c>.
            </exception>
        </member>
        <member name="T:Abacaxi.Graphs.Graph`1.IBfsNode">
            <summary>
                Describes a node in a BFS traversal tree.
            </summary>
        </member>
        <member name="P:Abacaxi.Graphs.Graph`1.IBfsNode.Vertex">
            <summary>
                Gets the vertex of the BFS node.
            </summary>
            <value>
                The vertex.
            </value>
        </member>
        <member name="P:Abacaxi.Graphs.Graph`1.IBfsNode.Parent">
            <summary>
                Gets the parent BFS node in the traversal tree.
            </summary>
            <value>
                The parent node.
            </value>
        </member>
        <member name="P:Abacaxi.Graphs.Graph`1.IBfsNode.EntryEdge">
            <summary>
                Gets the entry edge (the edge connecting <see cref="P:Abacaxi.Graphs.Graph`1.IBfsNode.Parent" /> and <see cref="P:Abacaxi.Graphs.Graph`1.IBfsNode.Vertex" />.
            </summary>
            <value>
                The entry edge.
            </value>
        </member>
        <member name="T:Abacaxi.Graphs.Graph`1.IDfsNode">
            <summary>
                Describes a node in a DFS traversal tree.
            </summary>
        </member>
        <member name="P:Abacaxi.Graphs.Graph`1.IDfsNode.Vertex">
            <summary>
                Gets the vertex of the BFS node.
            </summary>
            <value>
                The vertex.
            </value>
        </member>
        <member name="P:Abacaxi.Graphs.Graph`1.IDfsNode.Parent">
            <summary>
                Gets the parent DFS node in the traversal tree.
            </summary>
            <value>
                The parent node.
            </value>
        </member>
        <member name="P:Abacaxi.Graphs.Graph`1.IDfsNode.EntryEdge">
            <summary>
                Gets the entry edge (the edge connecting <see cref="P:Abacaxi.Graphs.Graph`1.IDfsNode.Parent" /> and <see cref="P:Abacaxi.Graphs.Graph`1.IDfsNode.Vertex" />.
            </summary>
            <value>
                The entry edge.
            </value>
        </member>
        <member name="P:Abacaxi.Graphs.Graph`1.IDfsNode.EntryTime">
            <summary>
                Gets the vertex "entry time".
            </summary>
            <value>
                The entry time.
            </value>
        </member>
        <member name="P:Abacaxi.Graphs.Graph`1.IDfsNode.ExitTime">
            <summary>
                Gets the vertex "exit time".
            </summary>
            <value>
                The exit time.
            </value>
        </member>
        <member name="T:Abacaxi.Graphs.LiteralGraph">
            <summary>
                A graph class used primarily for designing algorithms. Each vertex is a digit or letter and can be connected with
                other
                vertices in directed or undirected fashion.
            </summary>
        </member>
        <member name="M:Abacaxi.Graphs.LiteralGraph.#ctor(System.String,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Abacaxi.Graphs.LiteralGraph" /> class.
            </summary>
            <param name="relationships">The vertex relationship definitions.</param>
            <param name="isDirected">Specifies whether the graph is directed.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="relationships" /> is <c>null</c>.</exception>
        </member>
        <member name="P:Abacaxi.Graphs.LiteralGraph.IsDirected">
            <summary>
                Gets a value indicating whether this graph's edges are directed.
            </summary>
            <value>
                <c>true</c> if the graph is directed; <c>false</c> otherwise.
            </value>
        </member>
        <member name="P:Abacaxi.Graphs.LiteralGraph.IsReadOnly">
            <summary>
                Gets a value indicating whether this instance is read only.
            </summary>
            <value>
                <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Abacaxi.Graphs.LiteralGraph.SupportsPotentialWeightEvaluation">
            <summary>
                Gets a value indicating whether this graph supports potential weight evaluation (heuristics). This
                implementation always returns <c>false</c>.
            </summary>
            <value>
                <c>true</c> if graph supports potential weight evaluation; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Abacaxi.Graphs.LiteralGraph.GetEnumerator">
            <summary>
                Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Abacaxi.Graphs.LiteralGraph.GetEdges(System.Char)">
            <summary>
                Gets the edges of a given <paramref name="vertex" />.
            </summary>
            <param name="vertex">The vertex.</param>
            <returns>
                A sequence of edges connecting the <paramref name="vertex" /> to other vertices.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the given <paramref name="vertex" /> if not part of the
                graph.
            </exception>
        </member>
        <member name="M:Abacaxi.Graphs.LiteralGraph.GetPotentialWeight(System.Char,System.Char)">
            <summary>
                Gets the potential weight.
            </summary>
            <param name="fromVertex">From vertex.</param>
            <param name="toVertex">To vertex.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if either of <paramref name="fromVertex" /> or
                <paramref name="fromVertex" /> are not part of this graph.
            </exception>
        </member>
        <member name="T:Abacaxi.Graphs.MazeGraph">
            <summary>
                A maze-structured graph.
            </summary>
        </member>
        <member name="M:Abacaxi.Graphs.MazeGraph.#ctor(System.Boolean[0:,0:])">
            <summary>
                Initializes a new instance of the <see cref="T:Abacaxi.Graphs.MazeGraph" /> class.
            </summary>
            <param name="matrix">The backing two-dimensional array.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="matrix" /> is <c>null</c>.</exception>
        </member>
        <member name="P:Abacaxi.Graphs.MazeGraph.IsDirected">
            <summary>
                Gets a value indicating whether this graph's edges are directed.
            </summary>
            <value>
                Always returns <c>true</c>.
            </value>
        </member>
        <member name="P:Abacaxi.Graphs.MazeGraph.IsReadOnly">
            <summary>
                Gets a value indicating whether this instance is read only.
            </summary>
            <value>
                <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Abacaxi.Graphs.MazeGraph.SupportsPotentialWeightEvaluation">
            <summary>
                Gets a value indicating whether this graph supports potential weight evaluation (heuristics).
            </summary>
            <remarks>
                This graph implementation supports this potential weight evaluation based on cell proximity.
            </remarks>
            <value>
                <c>true</c> if graph supports potential weight evaluation; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Abacaxi.Graphs.MazeGraph.GetEnumerator">
            <summary>
                Returns an enumerator that iterates all vertices in the graph.
            </summary>
            <returns>
                A <see cref="T:System.Collections.Generic.IEnumerator{T}" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Abacaxi.Graphs.MazeGraph.GetPotentialWeight(Abacaxi.Graphs.Cell,Abacaxi.Graphs.Cell)">
            <summary>
                Gets the potential total weight connecting <paramref name="fromVertex" /> and <paramref name="toVertex" />
                vertices.
            </summary>
            <param name="fromVertex">The first vertex.</param>
            <param name="toVertex">The destination vertex.</param>
            <returns>
                The potential total cost (calculated as the number of cell hops from <paramref name="fromVertex" /> to
                <paramref name="toVertex" />).
            </returns>
        </member>
        <member name="M:Abacaxi.Graphs.MazeGraph.GetEdges(Abacaxi.Graphs.Cell)">
            <summary>
                Gets the edges for a given <paramref name="vertex" />.
            </summary>
            <param name="vertex"></param>
            <returns>
                A sequence of edges connected to the given <paramref name="vertex" />
            </returns>
            <exception cref="T:System.ArgumentException">Thrown if the <paramref name="vertex" /> is not part of the graph.</exception>
        </member>
        <member name="T:Abacaxi.Graphs.SubGraph`1">
            <summary>
                Implements a "connected component" of a graph, basically a sub-graph. This implementation uses the original graph
                to obtain the edges but only reports the edges which stay within the given set of vertices.
            </summary>
            <typeparam name="TVertex">The type of the vertex.</typeparam>
        </member>
        <member name="M:Abacaxi.Graphs.SubGraph`1.#ctor(Abacaxi.Graphs.Graph{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:Abacaxi.Graphs.SubGraph`1" /> class.
            </summary>
            <param name="graph">The graph.</param>
            <param name="vertices">The vertices that part of this sub-graph.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if either <paramref name="graph" /> or <paramref name="vertices" /> are
                <c>null</c>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                Thrown if <paramref name="vertices" /> contains at least one vertex that is
                not contained in <paramref name="graph" />.
            </exception>
        </member>
        <member name="P:Abacaxi.Graphs.SubGraph`1.IsDirected">
            <summary>
                Checks whether the sub-graph has directed edges.
            </summary>
            <remarks>
                This implementation uses the parent graph's <see cref="P:Abacaxi.Graphs.SubGraph`1.IsDirected" /> property.
            </remarks>
            <value>
                <c>true</c> if the sub-graph is directed; otherwise, <c>false</c> .
            </value>
        </member>
        <member name="P:Abacaxi.Graphs.SubGraph`1.IsReadOnly">
            <summary>
                Gets a value indicating whether this instance is read only.
            </summary>
            <remarks>
                This implementation uses the parent graph's <see cref="P:Abacaxi.Graphs.SubGraph`1.IsReadOnly" /> property.
            </remarks>
            <value>
                <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Abacaxi.Graphs.SubGraph`1.SupportsPotentialWeightEvaluation">
            <summary>
                Gets a value indicating whether this graph supports potential weight evaluation (heuristics).
            </summary>
            <remarks>
                This implementation uses the parent graph's <see cref="P:Abacaxi.Graphs.SubGraph`1.SupportsPotentialWeightEvaluation" /> property.
            </remarks>
            <value>
                <c>true</c> if graph supports potential weight evaluation; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Abacaxi.Graphs.SubGraph`1.GetEnumerator">
            <summary>
                Returns an enumerator that iterates all vertices in the graph.
            </summary>
            <returns>
                A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Abacaxi.Graphs.SubGraph`1.GetPotentialWeight(`0,`0)">
            <summary>
                Gets the potential total weight connecting <paramref name="fromVertex" /> and <paramref name="toVertex" />
                vertices.
            </summary>
            <remarks>
                This implementation uses the parent graph's <see cref="M:Abacaxi.Graphs.SubGraph`1.GetPotentialWeight(`0,`0)" /> method.
            </remarks>
            <param name="fromVertex">The first vertex.</param>
            <param name="toVertex">The destination vertex.</param>
            <returns>
                The potential total cost.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Abacaxi.Graphs.SubGraph`1.GetEdges(`0)">
            <summary>
                Gets the edges for a given <paramref name="vertex" />.
            </summary>
            <param name="vertex">Then vertex to get edges for.</param>
            <returns>
                A sequence of edges connected to the given <paramref name="vertex" />.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown if the <paramref name="vertex" /> is not part of the graph.</exception>
        </member>
        <member name="T:Abacaxi.Graphs.VertexDescriptor`1">
            <summary>
                Class used to describe a vertex in the context of a graph.
            </summary>
        </member>
        <member name="M:Abacaxi.Graphs.VertexDescriptor`1.#ctor(`0,System.Int32,System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Abacaxi.Graphs.VertexDescriptor`1" /> structure.
            </summary>
            <param name="vertex">The vertex.</param>
            <param name="componentIndex">Index of the component.</param>
            <param name="inDegree">The in-degree.</param>
            <param name="outDegree">The out-degree.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="componentIndex" /> or
                <paramref name="inDegree" /> or <paramref name="outDegree" /> are less than zero.
            </exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="vertex" /> is <c>null</c>.</exception>
        </member>
        <member name="P:Abacaxi.Graphs.VertexDescriptor`1.Vertex">
            <summary>
                Gets the vertex.
            </summary>
            <value>
                The vertex.
            </value>
        </member>
        <member name="P:Abacaxi.Graphs.VertexDescriptor`1.InDegree">
            <summary>
                Gets the in-degree of the <see cref="P:Abacaxi.Graphs.VertexDescriptor`1.Vertex" />.
            </summary>
            <value>
                The in-degree.
            </value>
        </member>
        <member name="P:Abacaxi.Graphs.VertexDescriptor`1.OutDegree">
            <summary>
                Gets the out-degree of the <see cref="P:Abacaxi.Graphs.VertexDescriptor`1.Vertex" />.
            </summary>
            <value>
                The out degree.
            </value>
        </member>
        <member name="P:Abacaxi.Graphs.VertexDescriptor`1.ComponentIndex">
            <summary>
                Gets the index of the component that contains the <see cref="P:Abacaxi.Graphs.VertexDescriptor`1.Vertex" />.
            </summary>
            <value>
                The component index.
            </value>
        </member>
        <member name="M:Abacaxi.Graphs.VertexDescriptor`1.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Abacaxi.InspectionFlags">
            <summary>
                Defines the three types of members that can be extracted from an object using
                <seealso cref="M:Abacaxi.ObjectExtensions.Inspect``1(``0,Abacaxi.InspectionFlags)" /> method.
            </summary>
        </member>
        <member name="F:Abacaxi.InspectionFlags.IncludeFields">
            <summary>
                Fields are included into the resulting dictionary.
            </summary>
        </member>
        <member name="F:Abacaxi.InspectionFlags.IncludeProperties">
            <summary>
                Properties are included into the resulting dictionary.
            </summary>
        </member>
        <member name="F:Abacaxi.InspectionFlags.IncludeMethods">
            <summary>
                Parameter-less methods are included into the resulting dictionary.
            </summary>
        </member>
        <member name="F:Abacaxi.InspectionFlags.IncludeAll">
            <summary>
                All members are included into the resulting dictionary.
            </summary>
        </member>
        <member name="T:Abacaxi.Integer">
            <summary>
                Helper class that defines a number of methods useful in integer/algorithmic manipulations.
            </summary>
        </member>
        <member name="M:Abacaxi.Integer.DeconstructIntoPowersOfTwo(System.Int32)">
            <summary>
                Returns a sequence of numbers (powers of two), which summed, result in the original number
                <paramref name="number" />.
            </summary>
            <param name="number">The number to be decomposed.</param>
            <returns>A sequence of numbers.</returns>
        </member>
        <member name="M:Abacaxi.Integer.DeconstructIntoPrimeFactors(System.Int32)">
            <summary>
                Returns a sequence of numbers, which, when multiplied produce the value of <paramref name="number" />.
            </summary>
            <param name="number">The number to be dis-constructed into its prime factors.</param>
            <returns>A sequence of primes.</returns>
        </member>
        <member name="M:Abacaxi.Integer.IsPrime(System.Int32)">
            <summary>
                Checks whether a given number is prime.
            </summary>
            <param name="number">The number to check.</param>
            <returns><c>true</c> if the number is prime; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Abacaxi.Integer.Zip(System.Int32,System.Int32,System.Int32)">
            <summary>
                Zips the digits of two integer numbers to form a new integer number.
            </summary>
            <param name="x">The first number to zip.</param>
            <param name="y">The second number to zip.</param>
            <param name="base">The base of the digits.</param>
            <returns>A number whose digits are taken from both <paramref name="x" /> and <paramref name="y" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="x" /> or <paramref name="y" /> are less than
                zero; or <paramref name="base" /> is less than two.
            </exception>
        </member>
        <member name="T:Abacaxi.IntegerPartitions">
            <summary>
                Class implements integer partitioning algorithms.
            </summary>
        </member>
        <member name="M:Abacaxi.IntegerPartitions.Enumerate(System.Int32)">
            <summary>
                Partitions a given integer into all possible combinations of smaller integers.
            </summary>
            <param name="number">The input number.</param>
            <returns>A sequence of combinations.</returns>
        </member>
        <member name="M:Abacaxi.IntegerPartitions.GetCount(System.Int32)">
            <summary>
                Calculates the count of partitions that a <paramref name="number" /> can be split into.
            </summary>
            <param name="number">The number to split.</param>
            <returns>The partition count.</returns>
        </member>
        <member name="T:Abacaxi.IO.BitWriter">
            <summary>
                Class implements writing bits/bytes to un underlying stream.
            </summary>
        </member>
        <member name="M:Abacaxi.IO.BitWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
                Initializes a new instance of <see cref="T:Abacaxi.IO.BitWriter" /> class.
            </summary>
            <param name="stream">The stream to write into.</param>
            <param name="encoding">The encoding object used to convert strings into bytes.</param>
            <param name="leaveOpen">Forces this instance to leave the stream open.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="stream" /> or <paramref name="encoding" /> are
                <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="stream" /> is not writable.</exception>
        </member>
        <member name="P:Abacaxi.IO.BitWriter.IsWordAligned">
            <summary>
                Specifies whether the writer is word aligned. When word-aligned, bytes can be written
                directly into the output stream.
            </summary>
        </member>
        <member name="M:Abacaxi.IO.BitWriter.Dispose">
            <summary>
                Disposes this instance of <see cref="T:Abacaxi.IO.BitWriter" /> class and attempts to close
                the underlying stream.
            </summary>
        </member>
        <member name="M:Abacaxi.IO.BitWriter.WriteBits(System.UInt32,System.Int32)">
            <summary>
                Writes a <paramref name="count" /> of bits (starting with bit 0) from parameter <paramref name="bits" />.
            </summary>
            <param name="bits">An <c>uint</c> value holding the bits to be written.</param>
            <param name="count">The number of bits to consider for writing.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if count is out of bounds.</exception>
        </member>
        <member name="M:Abacaxi.IO.BitWriter.WriteBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Writes an array of bytes to the output stream.
            </summary>
            <param name="bytes">The byte array.</param>
            <param name="offset">Index of the first element in the array.</param>
            <param name="count">The number of bytes to write.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="count" /> or <paramref name="offset" /> are out
                of bounds.
            </exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="bytes" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Abacaxi.IO.BitWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Writes an array of bytes to the output stream. Writes a prefix word that identifies the
                number of bytes the array contains.
            </summary>
            <param name="bytes">The byte array.</param>
            <param name="offset">Index of the first element in the array.</param>
            <param name="count">The number of bytes to write.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="count" /> is out of bounds.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="offset" /> is out of bounds.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="bytes" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Abacaxi.IO.BitWriter.Write(System.Byte[])">
            <summary>
                Writes an array of bytes to the output stream. Writes a prefix word that identifies the
                number of bytes the array contains.
            </summary>
            <param name="bytes">The byte array.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="bytes" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Abacaxi.IO.BitWriter.Write(System.Boolean)">
            <summary>
                Encodes a <c>bool</c> value.
            </summary>
            <param name="value">The value to encode.</param>
        </member>
        <member name="M:Abacaxi.IO.BitWriter.Write(System.Byte)">
            <summary>
                Encodes a <c>byte</c> value.
            </summary>
            <param name="value">The value to encode.</param>
        </member>
        <member name="M:Abacaxi.IO.BitWriter.Write(System.SByte)">
            <summary>
                Encodes a <c>sbyte</c> value.
            </summary>
            <param name="value">The value to encode.</param>
        </member>
        <member name="M:Abacaxi.IO.BitWriter.Write(System.UInt16)">
            <summary>
                Encodes a <c>ushort</c> value.
            </summary>
            <param name="value">The value to encode.</param>
        </member>
        <member name="M:Abacaxi.IO.BitWriter.Write(System.Int16)">
            <summary>
                Encodes a <c>short</c> value.
            </summary>
            <param name="value">The value to encode.</param>
        </member>
        <member name="M:Abacaxi.IO.BitWriter.Write(System.UInt32)">
            <summary>
                Encodes an <c>uint</c> value.
            </summary>
            <param name="value">The value to encode.</param>
        </member>
        <member name="M:Abacaxi.IO.BitWriter.Write(System.Int32)">
            <summary>
                Encodes an <c>int</c> value.
            </summary>
            <param name="value">The value to encode.</param>
        </member>
        <member name="M:Abacaxi.IO.BitWriter.Write(System.UInt64)">
            <summary>
                Encodes an <c>ulong</c> value.
            </summary>
            <param name="value">The value to encode.</param>
        </member>
        <member name="M:Abacaxi.IO.BitWriter.Write(System.Int64)">
            <summary>
                Encodes a <c>long</c> value.
            </summary>
            <param name="value">The value to encode.</param>
        </member>
        <member name="M:Abacaxi.IO.BitWriter.Write(System.Single)">
            <summary>
                Encodes a <c>float</c> value.
            </summary>
            <param name="value">The value to encode.</param>
        </member>
        <member name="M:Abacaxi.IO.BitWriter.Write(System.Double)">
            <summary>
                Encodes a <c>double</c> value.
            </summary>
            <param name="value">The value to encode.</param>
        </member>
        <member name="M:Abacaxi.IO.BitWriter.Write(System.Decimal)">
            <summary>
                Encodes a <c>decimal</c> value.
            </summary>
            <param name="value">The value to encode.</param>
        </member>
        <member name="M:Abacaxi.IO.BitWriter.Write(System.Char)">
            <summary>
                Encodes a <c>char</c> value using the encoding supplied at construction time.
            </summary>
            <param name="value">The value to encode.</param>
            <exception cref="T:System.ArgumentException">Thrown if the character is a surrogate.</exception>
        </member>
        <member name="M:Abacaxi.IO.BitWriter.Write(System.String)">
            <summary>
                Encodes a <c>string</c> value using the encoding supplied at construction time.
            </summary>
            <param name="value">The value to encode.</param>
            <exception cref="T:System.ArgumentNullException">Thrown is the supplied string is <c>null</c>.</exception>
        </member>
        <member name="M:Abacaxi.IO.BitWriter.Close">
            <summary>
                Closes the underlying stream if this instance was initialized with <c>leaveOpen</c>
                set to <c>true</c>.
            </summary>
        </member>
        <member name="M:Abacaxi.IO.BitWriter.Finalize">
            <summary>
                Finalizes this instance of <see cref="T:Abacaxi.IO.BitWriter" /> class.
            </summary>
        </member>
        <member name="M:Abacaxi.IO.BitWriter.Dispose(System.Boolean)">
            <summary>
                Disposes this instance of <see cref="T:Abacaxi.IO.BitWriter" /> class and attempts to close
                the underlying stream.
            </summary>
            <param name="disposing">
                <c>true</c> if method called explicitly; <c>false</c>
                if method was called from finalizer.
            </param>
        </member>
        <member name="T:Abacaxi.Knapsack">
            <summary>
                Class implements a set of  knapsack algorithms.
            </summary>
        </member>
        <member name="M:Abacaxi.Knapsack.Fill``1(System.Collections.Generic.IEnumerable{Abacaxi.KnapsackItem{``0}},System.Int32)">
            <summary>
                Finds the best combination of items to be placed in a knapsack of given <paramref name="knapsackWeight" /> weight.
            </summary>
            <typeparam name="T">The type of item.</typeparam>
            <param name="sequence">The sequence of item/value/weight elements.</param>
            <param name="knapsackWeight">The total knapsack weight.</param>
            <returns>
                The best selection of items filling the knapsack and maximizing total value.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="sequence" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="knapsackWeight" /> is less than one.</exception>
        </member>
        <member name="T:Abacaxi.KnapsackItem`1">
            <summary>
                Class describes an item that is used in the <seealso cref="T:Abacaxi.Knapsack" /> algorithms.
            </summary>
            <typeparam name="T">The type of described item.</typeparam>
        </member>
        <member name="M:Abacaxi.KnapsackItem`1.#ctor(`0,System.Double,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Abacaxi.KnapsackItem`1" /> class.
            </summary>
            <param name="item">The item.</param>
            <param name="value">The item value.</param>
            <param name="weight">The item weight.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="value" /> or <paramref name="weight" />
                are less than or equal to zero.
            </exception>
        </member>
        <member name="P:Abacaxi.KnapsackItem`1.Item">
            <summary>
                Gets the item.
            </summary>
            <value>
                The item.
            </value>
        </member>
        <member name="P:Abacaxi.KnapsackItem`1.Weight">
            <summary>
                Gets the item weight.
            </summary>
            <value>
                The item weight.
            </value>
        </member>
        <member name="P:Abacaxi.KnapsackItem`1.Value">
            <summary>
                Gets the item value.
            </summary>
            <value>
                The item value.
            </value>
        </member>
        <member name="M:Abacaxi.KnapsackItem`1.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Abacaxi.KnapsackItem`1.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Abacaxi.KnapsackItem`1.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:Abacaxi.ObjectExtensions">
            <summary>
                Implements a number of object-related helper methods useable across the library (and beyond!).
            </summary>
        </member>
        <member name="M:Abacaxi.ObjectExtensions.IsAnyOf``1(``0,``0[])">
            <summary>
                Determines whether <paramref name="value" /> is equal to any of the given candidates.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The value.</param>
            <param name="candidates">The candidates to check against.</param>
            <returns>
                <c>true</c> if the value is contained in the given candidate list; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Abacaxi.ObjectExtensions.Inspect``1(``0,Abacaxi.InspectionFlags)">
            <summary>
                Inspects a given object and extract a set of key-value pairs. Each pair is a field/property/method and its
                associated value. The inspection
                only considers public, non-static, non-generic and parameter-less members.
            </summary>
            <typeparam name="T">The type of object that is inspected.</typeparam>
            <param name="value">The object.</param>
            <param name="flags">The inspection flags. The default is <see cref="F:Abacaxi.InspectionFlags.IncludeProperties" />.</param>
            <returns>A readonly dictionary containing all object's inspected members.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Abacaxi.ObjectExtensions.TryConvert``1(System.Object,System.IFormatProvider,``0@)">
            <summary>
                Tries the cast or convert a given <paramref name="object" /> to a value of type <typeparamref name="T" />.
            </summary>
            <typeparam name="T">The type to convert to.</typeparam>
            <param name="object">The object to convert.</param>
            <param name="formatProvider">The format provider.</param>
            <param name="result">The resulting converted value.</param>
            <returns><c>true</c> if the conversion succeeded; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Abacaxi.ObjectExtensions.TryConvert``1(System.Object,``0@)">
            <summary>
                Tries the cast or convert a given <paramref name="object" /> to a value of type <typeparamref name="T" />.
                This method uses <seealso cref="P:System.Globalization.CultureInfo.InvariantCulture" /> for the conversion.
            </summary>
            <typeparam name="T">The type to convert to.</typeparam>
            <param name="object">The object to convert.</param>
            <param name="result">The resulting converted value.</param>
            <returns><c>true</c> if the conversion succeeded; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Abacaxi.ObjectExtensions.As``1(System.Object,System.IFormatProvider)">
            <summary>
                Converts a given <paramref name="object" /> to a given type <typeparamref name="T" />.
            </summary>
            <typeparam name="T">The type to convert to.</typeparam>
            <param name="object">The value to convert.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
                The converted value.
            </returns>
            <exception cref="T:System.FormatException">Thrown if the conversion failed.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="formatProvider" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Abacaxi.ObjectExtensions.As``1(System.Object)">
            <summary>
                Converts a given <paramref name="object" /> to a given type <typeparamref name="T" />.
                This method uses <seealso cref="P:System.Globalization.CultureInfo.InvariantCulture" /> for the conversion.
            </summary>
            <typeparam name="T">The type to convert to.</typeparam>
            <param name="object">The value to convert.</param>
            <returns>
                The converted value.
            </returns>
            <exception cref="T:System.FormatException">Thrown if the conversion failed.</exception>
        </member>
        <member name="M:Abacaxi.ObjectExtensions.Map``2(``0,System.Func{``0,``1})">
            <summary>
                Maps the input <paramref name="object" /> to a resulting output. Mostly useful for
                continuations of anonymous types.
            </summary>
            <typeparam name="T">The type of input object.</typeparam>
            <typeparam name="TMapped">The type of the resulting object.</typeparam>
            <param name="object">The object.</param>
            <param name="mapFunc">The mapping function.</param>
            <returns>The result of the mapping.</returns>
        </member>
        <member name="T:Abacaxi.Pairing">
            <summary>
                Class implements algorithms used to pair items in sequences towards a given cost goal.
            </summary>
        </member>
        <member name="M:Abacaxi.Pairing.GetWithMinimumCost``1(System.Collections.Generic.IList{``0},System.Func{``0,``0,System.Double})">
            <summary>
                Finds all pairs of items from a given <paramref name="sequence" /> whose total combination cost is minimum.
            </summary>
            <typeparam name="T">The type of items in the sequence.</typeparam>
            <param name="sequence">The input sequence.</param>
            <param name="evaluateCostOfPairFunc">The function used to evaluate costs of pairs.</param>
            <returns>A sequence of pairs which lowest overall cost.</returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="sequence" /> or
                <paramref name="evaluateCostOfPairFunc" /> are <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">Thrown if the number of elements in <paramref name="sequence" /> is not even.</exception>
        </member>
        <member name="M:Abacaxi.Pairing.GetWithApproximateMinimumCost``1(System.Collections.Generic.IList{``0},System.Func{``0,``0,System.Double},System.Int32)">
            <summary>
                Finds all pairs of items from a given <paramref name="sequence" /> whose total combination cost is minimum.
            </summary>
            <typeparam name="T">The type of items in the sequence.</typeparam>
            <param name="sequence">The input sequence.</param>
            <param name="evaluateCostOfPairFunc">The function used to evaluate costs of pairs.</param>
            <param name="iterations">The heuristics iteration (the higher the value, the better the results, but slower execution).</param>
            <returns>
                A sequence of pairs which lowest overall cost.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="sequence" /> or
                <paramref name="evaluateCostOfPairFunc" /> are <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">Thrown if the number of elements in <paramref name="sequence" /> is not even.</exception>
        </member>
        <member name="T:Abacaxi.RandomExtensions">
            <summary>
                Implements a number of random-related helper methods useable across the library (and beyond!).
            </summary>
        </member>
        <member name="M:Abacaxi.RandomExtensions.Sample``1(System.Random,System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                Returns a random sample of a given sequence of elements.
            </summary>
            <typeparam name="T">The type of elements in the <paramref name="sequence" />.</typeparam>
            <param name="random">The random instance to use for sampling.</param>
            <param name="sequence">The sequence of elements.</param>
            <param name="sampleSize">Length of the sample to be selected.</param>
            <returns>
                A random sequence of elements from <paramref name="sequence" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="sequence" /> or <paramref name="random" /> are
                <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="sampleSize" /> is less than one.</exception>
        </member>
        <member name="M:Abacaxi.RandomExtensions.NextBool(System.Random)">
            <summary>
                Returns a random <see cref="T:System.Boolean" /> value.
            </summary>
            <param name="random">The random class instance.</param>
            <returns>The random boolean value.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="random" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Abacaxi.RandomExtensions.NextItem``1(System.Random,System.Collections.Generic.IList{``0})">
            <summary>
                Returns a random item from a given <paramref name="sequence" />.
            </summary>
            <typeparam name="T">The type of items in the sequence.</typeparam>
            <param name="random">The random class instance.</param>
            <param name="sequence">The sequence.</param>
            <returns>A random element from the given <paramref name="sequence" /></returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="sequence" /> or <paramref name="random" /> are
                <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="sequence" /> is empty.</exception>
        </member>
        <member name="M:Abacaxi.RandomExtensions.NextItem``1(System.Random,``0,``0,``0[])">
            <summary>
                Returns a random item from the given items.
            </summary>
            <typeparam name="T">The type of items in the given list.</typeparam>
            <param name="random">The random class instance.</param>
            <param name="item1">The first item to consider.</param>
            <param name="item2">The second item to consider.</param>
            <param name="others">The others (third and after).</param>
            <returns>The randomly selected item.</returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="others" /> or <paramref name="random" /> are
                <c>null</c>.
            </exception>
        </member>
        <member name="T:Abacaxi.SequenceExtensions">
            <summary>
                Class provides a large number of algorithms to use on sequences.
            </summary>
        </member>
        <member name="M:Abacaxi.SequenceExtensions.FindLongestIncreasingSequence``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
                Finds the longest increasing sequence in a given <paramref name="sequence" />.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="sequence">The sequence to verify.</param>
            <param name="comparer">The comparer used to compare the elements in the sequence.</param>
            <returns>The longest increasing sequence.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="sequence" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="comparer" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Abacaxi.SequenceExtensions.ContainsTwoElementsThatAggregateTo``1(System.Collections.Generic.IEnumerable{``0},Abacaxi.Aggregator{``0},System.Collections.Generic.IComparer{``0},``0)">
            <summary>
                Determines whether the sequence contains two elements that target to a given <paramref name="target" /> value.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="sequence">The sequence to check.</param>
            <param name="target">The target value to search for.</param>
            <param name="aggregator">The function that aggregates two values.</param>
            <param name="comparer">The comparer.</param>
            <returns>
                <c>true</c> if the <paramref name="sequence" /> contains two elements that target; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="sequence" />, <paramref name="aggregator" /> or
                <paramref name="comparer" /> are null.
            </exception>
        </member>
        <member name="M:Abacaxi.SequenceExtensions.FindDuplicates``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Finds all duplicate items in a given <paramref name="sequence" />.
            </summary>
            <typeparam name="T">The type of the elements in the sequence.</typeparam>
            <param name="sequence">The sequence to inspect.</param>
            <param name="equalityComparer">The comparer used to verify the elements in the sequence.</param>
            <returns>A sequence of element-appearances pairs of the detected duplicates.</returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if either the <paramref name="sequence" /> or the
                <paramref name="equalityComparer" /> are <c>null</c>.
            </exception>
        </member>
        <member name="M:Abacaxi.SequenceExtensions.FindDuplicates(System.Collections.Generic.IEnumerable{System.Int32},System.Int32,System.Int32)">
            <summary>
                Finds all duplicate integers in a given <paramref name="sequence" />.
            </summary>
            <param name="sequence">The sequence to inspect.</param>
            <param name="minInSequence">The minimum possible value of an element part of the <paramref name="sequence" />.</param>
            <param name="maxInSequence">The maximum possible value of an element part of the <paramref name="sequence" />.</param>
            <returns>A sequence of element-appearances pairs of the detected duplicates.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="sequence" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="maxInSequence" /> is less than
                <paramref name="minInSequence" />.
            </exception>
        </member>
        <member name="M:Abacaxi.SequenceExtensions.ExtractNestedBlocks``1(System.Collections.Generic.IEnumerable{``0},``0,``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Extracts all nested groups from sequence. The method returns a sequence of sequences.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="sequence" />.</typeparam>
            <param name="sequence">The sequence.</param>
            <param name="openBracket">The element that signifies the start of a group.</param>
            <param name="closeBracket">The element that signifies the end of a group.</param>
            <param name="comparer">The equality comparer for the elements of the <paramref name="sequence" />.</param>
            <returns>The sequence of extracted groups, starting with the inner most ones.</returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="sequence" /> or <paramref name="comparer" /> are
                <c>null</c>.
            </exception>
            <exception cref="T:System.InvalidOperationException">Throws if the number of open and close brackets do not match.</exception>
        </member>
        <member name="M:Abacaxi.SequenceExtensions.FindSubsequencesWithGivenAggregatedValue``1(System.Collections.Generic.IList{``0},Abacaxi.Aggregator{``0},Abacaxi.Aggregator{``0},System.Collections.Generic.IComparer{``0},``0)">
            <summary>
                Finds the sub-sequences whose aggregated values are equal to a given <paramref name="target" /> value.
            </summary>
            <param name="sequence">The sequence to check.</param>
            <param name="aggregator">The value aggregator.</param>
            <param name="disaggregator">The value dis-aggregator.</param>
            <param name="comparer">The comparer.</param>
            <param name="target">The target aggregated value.</param>
            <returns>A sequence of found integers.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="sequence" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Abacaxi.SequenceExtensions.Interleave``1(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
                Interleaves multiple sequences into one output sequence.
            </summary>
            <typeparam name="T">The type of elements in the sequences.</typeparam>
            <param name="comparer">The comparer.</param>
            <param name="sequence">The first sequence to interleave.</param>
            <param name="sequences">The next sequences to interleave.</param>
            <returns>A new interleaved stream.</returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if the <paramref name="comparer" /> or <paramref name="sequences" /> is
                <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">Thrown if the <paramref name="sequences" /> is empty.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if one or more sequences contain unsorted items.</exception>
        </member>
        <member name="M:Abacaxi.SequenceExtensions.Reverse``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
                Reverses a given <paramref name="sequence" /> in place (mutating the original).
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="sequence">The sequence to reverse.</param>
            <param name="startIndex">The start index in the sequence.</param>
            <param name="length">The length of sequence to reverse.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="sequence" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when the combination of <paramref name="startIndex" /> and
                <paramref name="length" /> is out of bounds.
            </exception>
        </member>
        <member name="M:Abacaxi.SequenceExtensions.Repeat``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                Creates an array whose contents are the elements of the <paramref name="input" /> repeated
                <paramref name="repetitions" /> times.
            </summary>
            <typeparam name="T">The type of the sequence's elements</typeparam>
            <param name="input">The input sequence.</param>
            <param name="repetitions">Number of times to repeat the sequence.</param>
            <returns>A new array.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="input" /> sequence is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if the value of <paramref name="repetitions" /> argument is less
                than <c>1</c>.
            </exception>
        </member>
        <member name="M:Abacaxi.SequenceExtensions.BinarySearch``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0},System.Boolean)">
            <summary>
                Finds the location of <paramref name="item" /> in the given <paramref name="sequence" />.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="sequence">The sequence to search.</param>
            <param name="startIndex">The start index in the sequence.</param>
            <param name="length">The length of sequence to search..</param>
            <param name="item">The item to search for.</param>
            <param name="comparer">Comparer used in the search.</param>
            <param name="ascending">Specifies whether the sequence is sorted in ascending or descending order.</param>
            <returns>The index in the sequence where the <paramref name="item" /> was found; <c>-1</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if either <paramref name="sequence" /> or <paramref name="comparer" />
                are <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when the combination of <paramref name="startIndex" /> and
                <paramref name="length" /> is out of bounds.
            </exception>
        </member>
        <member name="M:Abacaxi.SequenceExtensions.Diff``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
                Evaluates the edit distance between two given sequences <paramref name="sequence" /> and
                <paramref name="resultSequence" />.
            </summary>
            <typeparam name="T">The type of elements in both sequences.</typeparam>
            <param name="sequence">The sequence to compare to.</param>
            <param name="resultSequence">The sequence to compare with.</param>
            <returns>
                A sequence of "edits" applied to the original <paramref name="sequence" /> to obtain the
                <paramref name="resultSequence" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if either <paramref name="sequence" /> or
                <paramref name="resultSequence" /> are <c>null</c>.
            </exception>
        </member>
        <member name="M:Abacaxi.SequenceExtensions.GetLongestCommonSubSequence``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
                Gets the longest common sub-sequence shared by <paramref name="sequence" /> and <paramref name="otherSequence" />.
            </summary>
            <typeparam name="T">The type of elements in both sequences.</typeparam>
            <param name="sequence">The sequence to compare to.</param>
            <param name="otherSequence">The sequence to compare with.</param>
            <returns>The longest common sub-sequence shared by both sequences.</returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if either <paramref name="sequence" /> or
                <paramref name="otherSequence" /> are <c>null</c>.
            </exception>
        </member>
        <member name="M:Abacaxi.SequenceExtensions.ToSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Converts a sequence to a set.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="sequence">The sequence.</param>
            <param name="comparer">An equality comparer.</param>
            <returns>A new set containing the elements in <paramref name="sequence" />.</returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if either of <paramref name="sequence" /> or
                <paramref name="comparer" /> are <c>null</c>.
            </exception>
        </member>
        <member name="M:Abacaxi.SequenceExtensions.ToSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Converts a sequence to a set.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="sequence">The sequence.</param>
            <returns>A new set containing the elements in <paramref name="sequence" />.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="sequence" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Abacaxi.SequenceExtensions.ToSet``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Converts a sequence to a set using a selector.
            </summary>
            <typeparam name="TSource">The type of items in the source sequence.</typeparam>
            <typeparam name="TResult">The type of elements in the resulting set.</typeparam>
            <param name="sequence">The sequence.</param>
            <param name="selector">The selector.</param>
            <returns>
                A new set containing the values selected from elements in <paramref name="sequence" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="sequence" /> or <paramref name="selector" /> is
                <c>null</c>.
            </exception>
        </member>
        <member name="M:Abacaxi.SequenceExtensions.AsList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Interprets a given <paramref name="sequence" /> as a list. The returned list can either be the same object or a new
                object.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="sequence">The sequence.</param>
            <returns>A list representing the original sequence.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="sequence" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Abacaxi.SequenceExtensions.GetItemFrequencies``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Evaluates the appearance frequency for each item in a <paramref name="sequence" />.
            </summary>
            <typeparam name="T">The type of items in the sequence </typeparam>
            <param name="sequence">The sequence.</param>
            <param name="comparer">The comparer.</param>
            <returns>
                A new dictionary where each key is an item form the <paramref name="sequence" /> and associated values are the
                frequencies.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if either of <paramref name="sequence" /> or
                <paramref name="comparer" /> are <c>null</c>.
            </exception>
        </member>
        <member name="M:Abacaxi.SequenceExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1,System.Func{``1,``1})">
            <summary>
                Adds a new key/valuer pair or updates an existing one.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dict">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="updateFunc">The value update function.</param>
            <returns><c>true</c> if the a new key/value pair was added; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if either of <paramref name="dict" /> or <paramref name="updateFunc" />
                are <c>null</c>.
            </exception>
        </member>
        <member name="M:Abacaxi.SequenceExtensions.Append``1(``0[],``0)">
            <summary>
                Appends the specified <paramref name="item1" /> to an array <paramref name="array" />.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="array" />.</typeparam>
            <param name="array">The array.</param>
            <param name="item1">The item to append to array.</param>
            <returns>A new array consisting <paramref name="array" /> and appended <paramref name="item1" />.</returns>
        </member>
        <member name="M:Abacaxi.SequenceExtensions.Append``1(``0[],``0,``0)">
            <summary>
                Appends the specified items to an array <paramref name="array" />.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="array" />.</typeparam>
            <param name="array">The array.</param>
            <param name="item1">The first item to append to array.</param>
            <param name="item2">The second item to append to array.</param>
            <returns>A new array consisting <paramref name="array" /> and appended items.</returns>
        </member>
        <member name="M:Abacaxi.SequenceExtensions.Append``1(``0[],``0,``0,``0)">
            <summary>
                Appends the specified items to an array <paramref name="array" />.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="array" />.</typeparam>
            <param name="array">The array.</param>
            <param name="item1">The first item to append to array.</param>
            <param name="item2">The second item to append to array.</param>
            <param name="item3">The third item to append to array.</param>
            <returns>A new array consisting <paramref name="array" /> and appended items.</returns>
        </member>
        <member name="M:Abacaxi.SequenceExtensions.Append``1(``0[],``0,``0,``0,``0)">
            <summary>
                Appends the specified items to an array <paramref name="array" />.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="array" />.</typeparam>
            <param name="array">The array.</param>
            <param name="item1">The first item to append to array.</param>
            <param name="item2">The second item to append to array.</param>
            <param name="item3">The third item to append to array.</param>
            <param name="item4">The fourth item to append to array.</param>
            <returns>A new array consisting <paramref name="array" /> and appended items.</returns>
        </member>
        <member name="M:Abacaxi.SequenceExtensions.Append``1(``0[],``0,``0,``0,``0,``0)">
            <summary>
                Appends the specified items to an array <paramref name="array" />.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="array" />.</typeparam>
            <param name="array">The array.</param>
            <param name="item1">The first item to append to array.</param>
            <param name="item2">The second item to append to array.</param>
            <param name="item3">The third item to append to array.</param>
            <param name="item4">The fourth item to append to array.</param>
            <param name="item5">The fifth item to append to array.</param>
            <returns>A new array consisting <paramref name="array" /> and appended items.</returns>
        </member>
        <member name="M:Abacaxi.SequenceExtensions.Append``1(``0[],``0[])">
            <summary>
                Appends the specified <paramref name="items" /> to an array <paramref name="array" />.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="array" />.</typeparam>
            <param name="array">The array.</param>
            <param name="items">The items to append to the array.</param>
            <returns>A new array consisting <paramref name="array" /> and appended items.</returns>
        </member>
        <member name="M:Abacaxi.SequenceExtensions.ToList``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Converts a given sequence to a list by applying a <paramref name="selector" /> to each element of the
                <paramref name="sequence" />.
            </summary>
            <typeparam name="T">/The type of elements in the sequence.</typeparam>
            <typeparam name="TResult">The type of the resulting elements.</typeparam>
            <param name="sequence">The input sequence.</param>
            <param name="selector">The selector function.</param>
            <returns>A new list which contains the selected values.</returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="sequence" /> or <paramref name="sequence" /> are
                <c>null</c>.
            </exception>
        </member>
        <member name="M:Abacaxi.SequenceExtensions.ToList``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
            <summary>
                Converts a given sequence to a list by applying a <paramref name="selector" /> to each element of the
                <paramref name="sequence" />.
            </summary>
            <typeparam name="T">/The type of elements in the sequence.</typeparam>
            <typeparam name="TResult">The type of the resulting elements.</typeparam>
            <param name="sequence">The input sequence.</param>
            <param name="selector">The selector function.</param>
            <remarks>
                The second argument to <paramref name="selector" /> is the index of the element in the original
                <paramref name="sequence" />.
            </remarks>
            <returns>A new list which contains the selected values.</returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="sequence" /> or <paramref name="sequence" /> are
                <c>null</c>.
            </exception>
        </member>
        <member name="M:Abacaxi.SequenceExtensions.Partition``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                Partitions a specified <paramref name="sequence" /> into chunks of given <paramref name="size" />.
            </summary>
            <typeparam name="T">The type of elements in the input sequence.</typeparam>
            <param name="sequence">The sequence to partition.</param>
            <param name="size">The size of each partition.</param>
            <returns>
                A sequence of partitioned items. Each partition is of the specified <paramref name="size" /> (or less, if no
                elements are left).
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="sequence" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="size" /> is less than one.</exception>
        </member>
        <member name="M:Abacaxi.SequenceExtensions.EmptyIfNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns either the given <paramref name="sequence" /> or an empty one if <paramref name="sequence" /> is
                <c>null</c>.
            </summary>
            <typeparam name="T">The type of elements in the given sequence.</typeparam>
            <param name="sequence">The sequence.</param>
            <returns>The original sequence or an empty one.</returns>
        </member>
        <member name="M:Abacaxi.SequenceExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Determines whether the given <paramref name="sequence" /> is null or empty.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="sequence">The sequence.</param>
            <returns>
                <c>true</c> if the sequence is null or empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Abacaxi.SequenceExtensions.ToString``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.String)">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this sequence of elements.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <typeparam name="TResult">The type of the result of the selector.</typeparam>
            <param name="sequence">The sequence.</param>
            <param name="selector">The result selector.</param>
            <param name="separator">The separator used between selected items.</param>
            <returns>
                A <see cref="T:System.String" /> that contains all the elements of the <paramref name="sequence" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="sequence" /> or <paramref name="selector" /> or
                <paramref name="separator" /> are <c>null</c>.
            </exception>
        </member>
        <member name="M:Abacaxi.SequenceExtensions.ToString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this sequence of elements.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="sequence">The sequence.</param>
            <param name="separator">The separator used between selected items.</param>
            <returns>
                A <see cref="T:System.String" /> that contains all the elements of the <paramref name="sequence" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="sequence" /> or <paramref name="separator" /> are
                <c>null</c>.
            </exception>
        </member>
        <member name="M:Abacaxi.SequenceExtensions.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
                Finds the object that has a given minimum <typeparamref name="TKey" />.
            </summary>
            <typeparam name="T">The type of elements in the <paramref name="sequence" />.</typeparam>
            <typeparam name="TKey">The type of the key selected by <paramref name="selector" />.</typeparam>
            <param name="sequence">The input sequence.</param>
            <param name="selector">The selector that return the key to compare.</param>
            <param name="comparer">The comparer used to compare the keys.</param>
            <returns>The item that has the minimum key.</returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="sequence" /> or <paramref name="selector" /> or
                <paramref name="comparer" /> are <c>null</c>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the <paramref name="sequence" /> is empty and
                <typeparamref name="T" /> is a value type.
            </exception>
        </member>
        <member name="M:Abacaxi.SequenceExtensions.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Finds the object that has a given minimum <typeparamref name="TKey" />.
            </summary>
            <typeparam name="T">The type of elements in the <paramref name="sequence" />.</typeparam>
            <typeparam name="TKey">The type of the key selected by <paramref name="selector" />.</typeparam>
            <param name="sequence">The input sequence.</param>
            <param name="selector">The selector that return the key to compare.</param>
            <remarks>The default comparer is used to compare values of type <typeparamref name="TKey" />.</remarks>
            <returns>The item that has the minimum key.</returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="sequence" /> or <paramref name="selector" /> are
                <c>null</c>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the <paramref name="sequence" /> is empty and
                <typeparamref name="T" /> is a value type.
            </exception>
        </member>
        <member name="M:Abacaxi.SequenceExtensions.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
                Finds the object that has a given maximum <typeparamref name="TKey" />.
            </summary>
            <typeparam name="T">The type of elements in the <paramref name="sequence" />.</typeparam>
            <typeparam name="TKey">The type of the key selected by <paramref name="selector" />.</typeparam>
            <param name="sequence">The input sequence.</param>
            <param name="selector">The selector that return the key to compare.</param>
            <param name="comparer">The comparer used to compare the keys.</param>
            <returns>The item that has the maximum key.</returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="sequence" /> or <paramref name="selector" /> or
                <paramref name="comparer" /> are <c>null</c>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the <paramref name="sequence" /> is empty and
                <typeparamref name="T" /> is a value type.
            </exception>
        </member>
        <member name="M:Abacaxi.SequenceExtensions.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Finds the object that has a given maximum <typeparamref name="TKey" />.
            </summary>
            <typeparam name="T">The type of elements in the <paramref name="sequence" />.</typeparam>
            <typeparam name="TKey">The type of the key selected by <paramref name="selector" />.</typeparam>
            <param name="sequence">The input sequence.</param>
            <param name="selector">The selector that return the key to compare.</param>
            <remarks>The default comparer is used to compare values of type <typeparamref name="TKey" />.</remarks>
            <returns>The item that has the maximum key.</returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="sequence" /> or <paramref name="selector" /> are
                <c>null</c>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the <paramref name="sequence" /> is empty and
                <typeparamref name="T" /> is a value type.
            </exception>
        </member>
        <member name="M:Abacaxi.SequenceExtensions.Segment``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
                Obtains a dedicated view into a segment of a given list. The returned list is a wrapper object that
                acts as an intermediary to the original one. All operations on the intermediary list will be applied to the
                original one.
            </summary>
            <typeparam name="T">The type of items in the sequence.</typeparam>
            <param name="sequence">The sequence.</param>
            <param name="startIndex">The start index for the segment.</param>
            <param name="length">The length of the segment.</param>
            <returns>A new list that wraps the given segment.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="sequence" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when the combination of <paramref name="startIndex" /> and
                <paramref name="length" /> is out of bounds.
            </exception>
        </member>
        <member name="T:Abacaxi.Set">
            <summary>
                Class implements set coverage algorithms.
            </summary>
        </member>
        <member name="M:Abacaxi.Set.GetOptimalFullCoverage``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.ISet{``0}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Finds the minimum number of sets that cover the full set of elements.
            </summary>
            <typeparam name="T">The type of elements in the set.</typeparam>
            <param name="sets">The sets.</param>
            <param name="comparer">The comparer.</param>
            <returns>A sequence of selected sets whose union results in the full coverage.</returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if either <paramref name="sets" /> or <paramref name="comparer" /> is
                <c>null</c>.
            </exception>
        </member>
        <member name="M:Abacaxi.Set.EnumerateSubsetCombinations``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
                Evaluates all combinations of items in <paramref name="sequence" /> divided into <paramref name="subsets" />.
            </summary>
            <typeparam name="T">The type of items in the <paramref name="sequence" /></typeparam>
            <param name="sequence">The sequence of elements.</param>
            <param name="subsets">Number of sub-sets.</param>
            <returns>All the combinations of subsets.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="sequence" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="subsets" /> is less than one.</exception>
        </member>
        <member name="M:Abacaxi.Set.SplitIntoSubsetsOfEqualValue``1(System.Collections.Generic.IList{``0},Abacaxi.Aggregator{``0},System.Collections.Generic.IComparer{``0},System.Int32)">
            <summary>
                Finds the subsets with equal aggregate value.
            </summary>
            <typeparam name="T">The type of elements in <paramref name="sequence" />.</typeparam>
            <param name="sequence">The sequence.</param>
            <param name="aggregator">The aggregator function.</param>
            <param name="comparer">The comparer.</param>
            <param name="subsets">The number of subsets to split into.</param>
            <returns>The first sequence of subsets that have the same aggregated value.</returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if either <paramref name="sequence" /> or <paramref name="aggregator" />
                or <paramref name="comparer" /> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="subsets" /> is less than one.</exception>
        </member>
        <member name="M:Abacaxi.Set.GetSubsetWithNearValue(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
                Finds the <paramref name="sequence" /> of integers, which summed, return the closest sum to a given
                <paramref name="target" />.
            </summary>
            <param name="sequence">The sequence of natural integers.</param>
            <param name="target">The target sum to aim for.</param>
            <returns>A sequence of found integers.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="sequence" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="target" /> is less than <c>1</c> or the
                <paramref name="sequence" /> contains negative number.
            </exception>
        </member>
        <member name="M:Abacaxi.Set.ContainsSubsetWithExactValue(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
                Checks if the <paramref name="sequence" /> contains elements, which, summed, yield a given target
                <paramref name="target" />.
            </summary>
            <param name="sequence">The sequence of natural integers.</param>
            <param name="target">The sum to target for.</param>
            <returns><c>true</c> if the condition is satisfied; <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="sequence" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="target" /> is less than <c>1</c> or the
                <paramref name="sequence" /> contains negative number.
            </exception>
        </member>
        <member name="M:Abacaxi.Set.GetSubsetWithGreatestValue``1(System.Collections.Generic.IEnumerable{``0},System.Int32,Abacaxi.Aggregator{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
                Finds the elements, which summed, yield the biggest sum.
            </summary>
            <typeparam name="T">The type of elements in the <paramref name="sequence" />.</typeparam>
            <param name="sequence">The sequence of elements.</param>
            <param name="size">The size of elements to consider.</param>
            <param name="aggregator">The aggregator function which sums elements.</param>
            <param name="comparer">The comparer.</param>
            <returns>An array of elements with the highest sum.</returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="sequence" />, <paramref name="aggregator" /> or
                <paramref name="comparer" /> are null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if the <paramref name="size" /> is greater than the number of
                elements in <paramref name="sequence" />.
            </exception>
        </member>
        <member name="T:Abacaxi.SimulatedAnnealing">
            <summary>
                Defines a set of algorithms useful during heuristic search for solutions.
            </summary>
        </member>
        <member name="M:Abacaxi.SimulatedAnnealing.Evaluate``2(``0,System.Int32,System.Func{``0,``1},System.Func{``1,``0,System.Int32,System.Int32,System.Double},System.Func{``1,System.Double},Abacaxi.SimulatedAnnealing.AlgorithmParameters)">
            <summary>
                Applies the simulated annealing algorithm to a given <paramref name="problemInput" />.
            </summary>
            <typeparam name="TInput">The type of the input data.</typeparam>
            <typeparam name="TSolution">The type of the solution.</typeparam>
            <param name="problemInput">The problem input.</param>
            <param name="problemInputLength">The problem input length.</param>
            <param name="evaluateInitialSolutionFunc">Function used to evaluate initial complete solution.</param>
            <param name="solutionTransitionFunc">Function used to transition solution.</param>
            <param name="evaluateSolutionCostFunc">Function used to evaluate the full cost of a solution.</param>
            <param name="algorithmParams">The algorithm parameters.</param>
            <returns>
                The approximated solution.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="problemInput" /> or <paramref name="evaluateInitialSolutionFunc" /> or
                <paramref name="solutionTransitionFunc" /> or <paramref name="evaluateSolutionCostFunc" /> or
                <paramref name="algorithmParams" /> are null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="problemInputLength" /> is less than or equal to
                zero.
            </exception>
        </member>
        <member name="M:Abacaxi.SimulatedAnnealing.Evaluate``1(System.Collections.Generic.IList{``0},System.Int32,System.Func{``0[],System.Double},Abacaxi.SimulatedAnnealing.AlgorithmParameters)">
            <summary>
                Applies the combinatorial simulated annealing algorithm to a given <paramref name="sequence" />.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="sequence">The sequence.</param>
            <param name="partitionLength">Length of a partition.</param>
            <param name="evaluatePartitionCostFunc">Function used evaluate the cost of a given partition.</param>
            <param name="algorithmParams">The algorithm parameters.</param>
            <returns>A sequence of partitions whose total cost is the approximated minimum.</returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="sequence" /> or
                <paramref name="evaluatePartitionCostFunc" /> or <paramref name="algorithmParams" /> are <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="partitionLength" /> is less than one.</exception>
        </member>
        <member name="T:Abacaxi.SimulatedAnnealing.AlgorithmParameters">
            <summary>
                Class that holds the required properties for <see cref="M:Abacaxi.SimulatedAnnealing.Evaluate``2(``0,System.Int32,System.Func{``0,``1},System.Func{``1,``0,System.Int32,System.Int32,System.Double},System.Func{``1,System.Double},Abacaxi.SimulatedAnnealing.AlgorithmParameters)" /> method.
            </summary>
        </member>
        <member name="M:Abacaxi.SimulatedAnnealing.AlgorithmParameters.#ctor(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
                Initializes a new instance of the <see cref="T:Abacaxi.SimulatedAnnealing.AlgorithmParameters" /> class.
            </summary>
            <param name="coolingSteps">The number cooling steps.</param>
            <param name="iterationsPerCoolingStep">The number of iterations per cooling step.</param>
            <param name="coolingAlpha">The cooling alpha constant.</param>
            <param name="initialTemperature">The initial temperature.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if any of the provided values are out of allowed range.</exception>
        </member>
        <member name="P:Abacaxi.SimulatedAnnealing.AlgorithmParameters.CoolingSteps">
            <summary>
                Gets number the cooling steps.
            </summary>
            <value>
                The number of cooling steps.
            </value>
        </member>
        <member name="P:Abacaxi.SimulatedAnnealing.AlgorithmParameters.IterationsPerCoolingStep">
            <summary>
                Gets the number of iterations per cooling step.
            </summary>
            <value>
                The number of iterations per cooling step.
            </value>
        </member>
        <member name="P:Abacaxi.SimulatedAnnealing.AlgorithmParameters.InitialTemperature">
            <summary>
                Gets the initial temperature.
            </summary>
            <value>
                The initial temperature.
            </value>
        </member>
        <member name="P:Abacaxi.SimulatedAnnealing.AlgorithmParameters.CoolingAlpha">
            <summary>
                Gets the cooling alpha constant.
            </summary>
            <value>
                The cooling alpha constant.
            </value>
        </member>
        <member name="T:Abacaxi.Sorting">
            <summary>
                Class provides a large number of sorting algorithms to use on sequences.
            </summary>
        </member>
        <member name="M:Abacaxi.Sorting.BubbleSort``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary>
                Bubble-Sorts the <paramref name="sequence" /> using the provided <paramref name="comparer" />.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="sequence">The sequence to sort.</param>
            <param name="startIndex">The start index in the sequence.</param>
            <param name="length">The length of sequence to sort.</param>
            <param name="comparer">Comparer used in the search.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if either <paramref name="sequence" /> or <paramref name="comparer" />
                are <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when the combination of <paramref name="startIndex" /> and
                <paramref name="length" /> is out of bounds.
            </exception>
        </member>
        <member name="M:Abacaxi.Sorting.CocktailShakerSort``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary>
                Cocktail-Shaker-Sorts the <paramref name="sequence" /> using the provided <paramref name="comparer" />.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="sequence">The sequence to sort.</param>
            <param name="startIndex">The start index in the sequence.</param>
            <param name="length">The length of sequence to sort.</param>
            <param name="comparer">Comparer used in the search.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if either <paramref name="sequence" /> or <paramref name="comparer" />
                are <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when the combination of <paramref name="startIndex" /> and
                <paramref name="length" /> is out of bounds.
            </exception>
        </member>
        <member name="M:Abacaxi.Sorting.CombSort``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary>
                Comb-Sorts the <paramref name="sequence" /> using the provided <paramref name="comparer" />.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="sequence">The sequence to sort.</param>
            <param name="startIndex">The start index in the sequence.</param>
            <param name="length">The length of sequence to sort.</param>
            <param name="comparer">Comparer used in the search.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if either <paramref name="sequence" /> or <paramref name="comparer" />
                are <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when the combination of <paramref name="startIndex" /> and
                <paramref name="length" /> is out of bounds.
            </exception>
        </member>
        <member name="M:Abacaxi.Sorting.GnomeSort``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary>
                Gnome-Sorts the <paramref name="sequence" /> using the provided <paramref name="comparer" />.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="sequence">The sequence to sort.</param>
            <param name="startIndex">The start index in the sequence.</param>
            <param name="length">The length of sequence to sort.</param>
            <param name="comparer">Comparer used in the search.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if either <paramref name="sequence" /> or <paramref name="comparer" />
                are <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when the combination of <paramref name="startIndex" /> and
                <paramref name="length" /> is out of bounds.
            </exception>
        </member>
        <member name="M:Abacaxi.Sorting.HeapSort``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary>
                Heap-Sorts the <paramref name="sequence" /> using the provided <paramref name="comparer" />.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="sequence">The sequence to sort.</param>
            <param name="startIndex">The start index in the sequence.</param>
            <param name="length">The length of sequence to sort.</param>
            <param name="comparer">Comparer used in the search.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if either <paramref name="sequence" /> or <paramref name="comparer" />
                are <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when the combination of <paramref name="startIndex" /> and
                <paramref name="length" /> is out of bounds.
            </exception>
        </member>
        <member name="M:Abacaxi.Sorting.InsertionSort``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary>
                Insertion-Sorts the <paramref name="sequence" /> using the provided <paramref name="comparer" />.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="sequence">The sequence to sort.</param>
            <param name="startIndex">The start index in the sequence.</param>
            <param name="length">The length of sequence to sort.</param>
            <param name="comparer">Comparer used in the search.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if either <paramref name="sequence" /> or <paramref name="comparer" />
                are <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when the combination of <paramref name="startIndex" /> and
                <paramref name="length" /> is out of bounds.
            </exception>
        </member>
        <member name="M:Abacaxi.Sorting.MergeSort``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary>
                Merge-Sorts the <paramref name="sequence" /> using the provided <paramref name="comparer" />.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="sequence">The sequence to sort.</param>
            <param name="startIndex">The start index in the sequence.</param>
            <param name="length">The length of sequence to sort.</param>
            <param name="comparer">Comparer used in the search.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if either <paramref name="sequence" /> or <paramref name="comparer" />
                are <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when the combination of <paramref name="startIndex" /> and
                <paramref name="length" /> is out of bounds.
            </exception>
        </member>
        <member name="M:Abacaxi.Sorting.OddEvenSort``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary>
                Odd-Even-Sorts the <paramref name="sequence" /> using the provided <paramref name="comparer" />.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="sequence">The sequence to sort.</param>
            <param name="startIndex">The start index in the sequence.</param>
            <param name="length">The length of sequence to sort.</param>
            <param name="comparer">Comparer used in the search.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if either <paramref name="sequence" /> or <paramref name="comparer" />
                are <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when the combination of <paramref name="startIndex" /> and
                <paramref name="length" /> is out of bounds.
            </exception>
        </member>
        <member name="M:Abacaxi.Sorting.QuickSort``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary>
                Quick-Sorts the <paramref name="sequence" /> using the provided <paramref name="comparer" />.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="sequence">The sequence to sort.</param>
            <param name="startIndex">The start index in the sequence.</param>
            <param name="length">The length of sequence to sort.</param>
            <param name="comparer">Comparer used in the search.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if either <paramref name="sequence" /> or <paramref name="comparer" />
                are <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when the combination of <paramref name="startIndex" /> and
                <paramref name="length" /> is out of bounds.
            </exception>
        </member>
        <member name="M:Abacaxi.Sorting.ShellSort``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary>
                Shell-Sorts the <paramref name="sequence" /> using the provided <paramref name="comparer" />.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="sequence">The sequence to sort.</param>
            <param name="startIndex">The start index in the sequence.</param>
            <param name="length">The length of sequence to sort.</param>
            <param name="comparer">Comparer used in the search.</param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if either <paramref name="sequence" /> or <paramref name="comparer" />
                are <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when the combination of <paramref name="startIndex" /> and
                <paramref name="length" /> is out of bounds.
            </exception>
        </member>
        <member name="T:Abacaxi.StringBuilderExtensions">
            <summary>
                Extension method for the <see cref="T:System.Text.StringBuilder" /> class.
            </summary>
        </member>
        <member name="M:Abacaxi.StringBuilderExtensions.AppendNotEmptyLine(System.Text.StringBuilder,System.String)">
            <summary>
                Appends a line to the string builder if the value is not empty.
            </summary>
            <param name="builder">The string builder.</param>
            <param name="value">The value to append.</param>
            <returns>A sequence of lines containing the word wrapped string.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="builder" /> is <c>null</c>.</exception>
        </member>
        <member name="T:Abacaxi.StringExtensions">
            <summary>
                Extension method for the <see cref="T:System.String" /> data type.
            </summary>
        </member>
        <member name="M:Abacaxi.StringExtensions.AsList(System.String)">
            <summary>
                Treats a given string as a list of characters.
            </summary>
            <param name="s">The string.</param>
            <returns>A wrapping list.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="s" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Abacaxi.StringExtensions.Reverse(System.String)">
            <summary>
                Reverses the specified string using "undivided" string chunks.
            </summary>
            <param name="s">The string to reverse.</param>
            <returns>The reserved string.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="s" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Abacaxi.StringExtensions.Shorten(System.String,System.Int32,System.String)">
            <summary>
                Shortens the specified string up to a maximum length.
            </summary>
            <param name="s">The string.</param>
            <param name="maxLength">The maximum length of the output string.</param>
            <param name="ellipsis">The optional ellipsis string.</param>
            <returns>A string of a maximum of <paramref name="maxLength" /> character.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="s" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown if <paramref name="maxLength" /> is less than one or the
                length of <paramref name="ellipsis" />is greater than <paramref name="maxLength" />.
            </exception>
        </member>
        <member name="M:Abacaxi.StringExtensions.Escape(System.String)">
            <summary>
                Escapes the specified string.
            </summary>
            <remarks>
                This method escapes the special characters and unicode escape characters.
            </remarks>
            <param name="s">The string to escape.</param>
            <returns>The escaped string.</returns>
        </member>
        <member name="M:Abacaxi.StringExtensions.Like(System.String,System.String,System.Boolean)">
            <summary>
                Checks whether the given string matches the specified pattern.
            </summary>
            <param name="s">The string to check.</param>
            <param name="pattern">The pattern.</param>
            <param name="ignoreCase">If set to <c>true</c>, ignores the case.</param>
            <returns><c>true</c> if the string matches the pattern; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="s" /> or <paramref name="pattern" /> are
                <c>null</c>.
            </exception>
        </member>
        <member name="M:Abacaxi.StringExtensions.FindDuplicates(System.String)">
            <summary>
                Finds all duplicate characters in a given <paramref name="s" />.
            </summary>
            <param name="s">The string to inspect.</param>
            <returns>A s of element-appearances pairs of the detected duplicates.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="s" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Abacaxi.StringExtensions.SplitIntoLines(System.String)">
            <summary>
                Splits a given string into separate lines (based on the presence of CRLF or LF sequences).
            </summary>
            <param name="s">The string to split.</param>
            <returns>A sequence of strings, each representing an individual line in the string.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="s" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Abacaxi.StringExtensions.WordWrap(System.String,System.Int32)">
            <summary>
                Wraps the specified string according to a given line length.
            </summary>
            <param name="s">The string to word wrap.</param>
            <param name="lineLength">Length of the line.</param>
            <returns>A sequence of lines containing the word wrapped string.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="s" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="lineLength" /> is less than one.</exception>
        </member>
        <member name="M:Abacaxi.StringExtensions.StripDiacritics(System.String)">
            <summary>
                Strips the diacritics from a given string, replacing the characters in question with equivalent non-diacritic ones.
            </summary>
            <param name="s">The string.</param>
            <returns>A string with stripped diacritics.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="s" /> is <c>null</c>.</exception>
        </member>
        <member name="T:Abacaxi.Threading.Cached`1">
            <summary>
                Container that caches a value for a specified duration.
            </summary>
            <typeparam name="T">The type of value cached by this container.</typeparam>
        </member>
        <member name="M:Abacaxi.Threading.Cached`1.#ctor(System.Func{`0},System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Abacaxi.Threading.Cached`1" /> class.
            </summary>
            <param name="valueRefreshFunc">The function that creates a new value.</param>
            <param name="valueLifespanMillis">The lifespan of the created resource (in milliseconds).</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="valueRefreshFunc" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="valueLifespanMillis" /> is less than one.</exception>
        </member>
        <member name="M:Abacaxi.Threading.Cached`1.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Abacaxi.Threading.Cached`1" /> class.
            </summary>
            <param name="valueLifespanMillis">The lifespan of the created resource (in milliseconds).</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="valueLifespanMillis" /> is less than one.</exception>
        </member>
        <member name="P:Abacaxi.Threading.Cached`1.Value">
            <summary>
                Gets the cached value. This property is thread-safe and is blocking during the refresh.
            </summary>
            <value>
                The cached value.
            </value>
        </member>
        <member name="M:Abacaxi.Threading.Cached`1.Get(System.Func{`0})">
            <summary>
                Gets the cached value using a given refresh function.
            </summary>
            <param name="valueRefreshFunc">The value refresh function.</param>
            <returns>The cached value.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="valueRefreshFunc" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Abacaxi.Threading.Cached`1.Expire">
            <summary>
                Expires current resource value managed by this <see cref="T:Abacaxi.Threading.Cached`1" />.
            </summary>
            <remarks>The resource will be refreshed the next time <see cref="P:Abacaxi.Threading.Cached`1.Value" /> property is accessed.</remarks>
        </member>
        <member name="T:Abacaxi.Trees.AvlTree`2">
            <summary>
                Class implements the AVL balanced search tree.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Abacaxi.Trees.AvlTree`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:Abacaxi.Trees.AvlTree`2" /> class.
            </summary>
            <param name="comparer">The key comparer used.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="comparer" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Abacaxi.Trees.AvlTree`2.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Abacaxi.Trees.AvlTree`2" /> class using the default
                <typeparamref name="TKey" /> comparer.
            </summary>
        </member>
        <member name="P:Abacaxi.Trees.AvlTree`2.Root">
            <summary>
                Gets or sets the root node of the AVL tree.
            </summary>
            <value>
                The root.
            </value>
        </member>
        <member name="M:Abacaxi.Trees.AvlTree`2.LookupNode(`0)">
            <summary>
                Looks up the node ky the given <paramref name="key" />.
            </summary>
            <param name="key">The key of the node.</param>
            <returns>The node, if found; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:Abacaxi.Trees.AvlTree`2.Add(`0,`1)">
            <summary>
                Adds the specified key/value node to the tree.
            </summary>
            <param name="key">The node's key.</param>
            <param name="value">The node's value.</param>
            <exception cref="T:System.ArgumentException">
                Thrown if a node with the same <paramref name="key" /> is already present in
                the tree.
            </exception>
        </member>
        <member name="M:Abacaxi.Trees.AvlTree`2.AddOrUpdate(`0,`1)">
            <summary>
                Adds or updates a tree node that has a given key and value.
            </summary>
            <param name="key">The node's key.</param>
            <param name="value">The node's new value.</param>
        </member>
        <member name="M:Abacaxi.Trees.AvlTree`2.Remove(`0)">
            <summary>
                Removes the node from the tree that has a specified key.
            </summary>
            <param name="key">The node's key.</param>
            <returns><c>true</c> if the node was removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Abacaxi.Trees.AvlTreeNode`2">
            <summary>
                Class represents a node in a AVL balanced search tree.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="P:Abacaxi.Trees.AvlTreeNode`2.RightChild">
            <summary>
                Gets the right child node.
            </summary>
            <value>
                The right child node.
            </value>
        </member>
        <member name="P:Abacaxi.Trees.AvlTreeNode`2.LeftChild">
            <summary>
                Gets the left child node.
            </summary>
            <value>
                The left child node.
            </value>
        </member>
        <member name="P:Abacaxi.Trees.AvlTreeNode`2.Parent">
            <summary>
                Gets or sets the parent node.
            </summary>
            <value>
                The parent node.
            </value>
        </member>
        <member name="P:Abacaxi.Trees.AvlTreeNode`2.Balance">
            <summary>
                Gets or sets the balance of this node (AVL sub-tree).
            </summary>
            <value>
                The balance of the sub-tree.
            </value>
        </member>
        <member name="T:Abacaxi.Trees.BinarySearchTree`2">
            <summary>
                Class implements the binary search tree and serves as a base class for other balanced search trees.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Abacaxi.Trees.BinarySearchTree`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:Abacaxi.Trees.BinarySearchTree`2" /> class.
            </summary>
            <param name="comparer">The key comparer used.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="comparer" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Abacaxi.Trees.BinarySearchTree`2.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Abacaxi.Trees.BinarySearchTree`2" /> class using the default
                <typeparamref name="TKey" /> comparer.
            </summary>
        </member>
        <member name="P:Abacaxi.Trees.BinarySearchTree`2.Comparer">
            <summary>
                Gets the comparer used for ordering tree nodes' keys.
            </summary>
            <value>
                The comparer.
            </value>
        </member>
        <member name="P:Abacaxi.Trees.BinarySearchTree`2.Root">
            <summary>
                Gets or sets the root tree node.
            </summary>
            <value>
                The root tree node.
            </value>
        </member>
        <member name="P:Abacaxi.Trees.BinarySearchTree`2.Item(`0)">
            <summary>
                Gets or sets the value of a node identified by <paramref name="key" />.
            </summary>
            <value>
                The value of the node.
            </value>
            <param name="key">The key of the node.</param>
            <returns>The value of the node identified by the <paramref name="key" />.</returns>
            <exception cref="T:System.ArgumentException">
                Thrown if the tree does not contain any node identified by the
                <paramref name="key" />.
            </exception>
        </member>
        <member name="M:Abacaxi.Trees.BinarySearchTree`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
                Adds the specified key/value node to the tree.
            </summary>
            <param name="item">The node's key/value pair.</param>
            <exception cref="T:System.ArgumentException">Thrown if a node with the same key is already present in the tree.</exception>
        </member>
        <member name="M:Abacaxi.Trees.BinarySearchTree`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
                Removes the node identified by the key and value of the given <paramref name="item" />.
            </summary>
            <remarks>
                This method is provided for compatibility with <see cref="T:System.Collections.Generic.ICollection`1" />. It is not recommended for normal use.
                The values of nodes are compared using the default equality comparer for that type.
            </remarks>
            <param name="item">The key/value pair to remove from the tree.</param>
            <returns>
                <c>true</c> if the node was successfully removed; otherwise, false.
            </returns>
        </member>
        <member name="M:Abacaxi.Trees.BinarySearchTree`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
                Determines whether the tree contains the given key/value node.
            </summary>
            <param name="item">The key/value pair to search for.</param>
            <returns>
                <c>true</c> if <paramref name="item" /> is found in the tree; otherwise, <c>false</c>.
            </returns>
            <remarks>
                This method is provided for compatibility with <see cref="T:System.Collections.Generic.ICollection`1" />. It is not recommended for normal use.
                The values of nodes are compared using the default equality comparer for that type.
            </remarks>
        </member>
        <member name="M:Abacaxi.Trees.BinarySearchTree`2.Clear">
            <summary>
                Clears this tree.
            </summary>
        </member>
        <member name="M:Abacaxi.Trees.BinarySearchTree`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
                Copies the elements of the tree to an <see cref="T:System.Array" />, starting at a particular
                <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">
                The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied
                from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have
                zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Abacaxi.Trees.BinarySearchTree`2.Count">
            <summary>
                Gets the count of nodes in this tree.
            </summary>
            <value>
                The total count of nodes.
            </value>
        </member>
        <member name="P:Abacaxi.Trees.BinarySearchTree`2.IsReadOnly">
            <summary>
                Gets a value indicating whether the tree is read-only.
            </summary>
        </member>
        <member name="M:Abacaxi.Trees.BinarySearchTree`2.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the tree in-order.
            </summary>
            <returns>
                An enumerator that can be used to iterate through the tree.
            </returns>
        </member>
        <member name="M:Abacaxi.Trees.BinarySearchTree`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the tree in-order.
            </summary>
            <returns>
                An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the tree.
            </returns>
        </member>
        <member name="M:Abacaxi.Trees.BinarySearchTree`2.ThrowKeyNotFound(System.String)">
            <summary>
                Throws the standard "key not found" exception.
            </summary>
            <param name="argumentName">Name of the argument.</param>
            <exception cref="T:System.ArgumentException">The tree does not contain a node with the given key.</exception>
        </member>
        <member name="M:Abacaxi.Trees.BinarySearchTree`2.ThrowDuplicateKeyFound(System.String)">
            <summary>
                Throws the standard "duplicate key found" exception.
            </summary>
            <param name="argumentName">Name of the argument.</param>
            <exception cref="T:System.ArgumentException">The tree already contains a node with the given key.</exception>
        </member>
        <member name="M:Abacaxi.Trees.BinarySearchTree`2.NotifyTreeChanged(System.Int32)">
            <summary>
                Increases the version of the tree. The version must be increased on each modification.
            </summary>
        </member>
        <member name="M:Abacaxi.Trees.BinarySearchTree`2.LookupNode(`0)">
            <summary>
                Looks up the node ky the given <paramref name="key" />.
            </summary>
            <param name="key">The key of the node.</param>
            <returns>The node, if found; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:Abacaxi.Trees.BinarySearchTree`2.Add(`0,`1)">
            <summary>
                Adds the specified key/value node to the tree.
            </summary>
            <param name="key">The node's key.</param>
            <param name="value">The node's value.</param>
            <exception cref="T:System.ArgumentException">
                Thrown if a node with the same <paramref name="key" /> is already present in the
                tree.
            </exception>
        </member>
        <member name="M:Abacaxi.Trees.BinarySearchTree`2.Update(`0,`1)">
            <summary>
                Updated the value of a node having a given key.
            </summary>
            <param name="key">The node's key.</param>
            <param name="value">The node's new value.</param>
            <exception cref="T:System.ArgumentException">Thrown if no node found with the given <paramref name="key" />.</exception>
        </member>
        <member name="M:Abacaxi.Trees.BinarySearchTree`2.AddOrUpdate(`0,`1)">
            <summary>
                Adds or updates a tree node that has a given key and value.
            </summary>
            <param name="key">The node's key.</param>
            <param name="value">The node's new value.</param>
        </member>
        <member name="M:Abacaxi.Trees.BinarySearchTree`2.Remove(`0)">
            <summary>
                Removes the node from the tree that has a specified key.
            </summary>
            <param name="key">The node's key.</param>
            <returns><c>true</c> if the node was removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Abacaxi.Trees.BinarySearchTree`2.TryGetValue(`0,`1@)">
            <summary>
                Tries the get value of the node identified by the given <paramref name="key" />.
            </summary>
            <param name="key">The key of the node.</param>
            <param name="value">The value of the node (if found).</param>
            <returns><c>true</c> if the node was found; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Abacaxi.Trees.BinarySearchTree`2.GetEnumerator(Abacaxi.Trees.TreeTraversalMode)">
            <summary>
                Returns an enumerator that iterates through the tree.
            </summary>
            <param name="mode">The traversal mode.</param>
            <returns>
                An enumerator that can be used to iterate through the tree.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <paramref name="mode" /> is invalid.</exception>
        </member>
        <member name="T:Abacaxi.Trees.BinaryTreeNode`2">
            <summary>
                Class represents a node in a binary search tree (or any derivative balanced search tree).
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="P:Abacaxi.Trees.BinaryTreeNode`2.Key">
            <summary>
                Gets the key of the node.
            </summary>
            <value>
                The key.
            </value>
        </member>
        <member name="P:Abacaxi.Trees.BinaryTreeNode`2.Value">
            <summary>
                Gets the value of the node.
            </summary>
            <value>
                The value.
            </value>
        </member>
        <member name="P:Abacaxi.Trees.BinaryTreeNode`2.RightChild">
            <summary>
                Gets the right child node.
            </summary>
            <value>
                The right child node.
            </value>
        </member>
        <member name="P:Abacaxi.Trees.BinaryTreeNode`2.LeftChild">
            <summary>
                Gets the left child node.
            </summary>
            <value>
                The left child node.
            </value>
        </member>
        <member name="T:Abacaxi.Trees.LeftLeaningRedBlackTree`2">
            <summary>
                Class implements the left-leaning red-black balanced search tree.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Abacaxi.Trees.LeftLeaningRedBlackTree`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:Abacaxi.Trees.LeftLeaningRedBlackTree`2" /> class.
            </summary>
            <param name="comparer">The key comparer used.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="comparer" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Abacaxi.Trees.LeftLeaningRedBlackTree`2.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Abacaxi.Trees.LeftLeaningRedBlackTree`2" /> class using the default
                <typeparamref name="TKey" /> comparer.
            </summary>
        </member>
        <member name="P:Abacaxi.Trees.LeftLeaningRedBlackTree`2.Root">
            <summary>
                Gets or sets the root node of the AVL tree.
            </summary>
            <value>
                The root.
            </value>
        </member>
        <member name="M:Abacaxi.Trees.LeftLeaningRedBlackTree`2.LookupNode(`0)">
            <summary>
                Looks up the node ky the given <paramref name="key" />.
            </summary>
            <param name="key">The key of the node.</param>
            <returns>The node, if found; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:Abacaxi.Trees.LeftLeaningRedBlackTree`2.Add(`0,`1)">
            <summary>
                Adds the specified key/value node to the tree.
            </summary>
            <param name="key">The node's key.</param>
            <param name="value">The node's value.</param>
            <exception cref="T:System.ArgumentException">
                Thrown if a node with the same <paramref name="key" /> is already present in
                the tree.
            </exception>
        </member>
        <member name="M:Abacaxi.Trees.LeftLeaningRedBlackTree`2.AddOrUpdate(`0,`1)">
            <summary>
                Adds or updates a tree node that has a given key and value.
            </summary>
            <param name="key">The node's key.</param>
            <param name="value">The node's new value.</param>
        </member>
        <member name="M:Abacaxi.Trees.LeftLeaningRedBlackTree`2.Remove(`0)">
            <summary>
                Removes the node from the tree that has a specified key.
            </summary>
            <param name="key">The node's key.</param>
            <returns><c>true</c> if the node was removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Abacaxi.Trees.RedBlackTreeNode`2">
            <summary>
                Class represents a node in a red-black balanced search tree.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="P:Abacaxi.Trees.RedBlackTreeNode`2.RightChild">
            <summary>
                Gets the right child node.
            </summary>
            <value>
                The right child node.
            </value>
        </member>
        <member name="P:Abacaxi.Trees.RedBlackTreeNode`2.LeftChild">
            <summary>
                Gets the left child node.
            </summary>
            <value>
                The left child node.
            </value>
        </member>
        <member name="P:Abacaxi.Trees.RedBlackTreeNode`2.Color">
            <summary>
                Gets or sets the color of this node.
            </summary>
            <value>
                The color.
            </value>
        </member>
        <member name="T:Abacaxi.Trees.RedBlackTreeNodeColor">
            <summary>
                Defines possible colors a red-black tree node can take.
            </summary>
        </member>
        <member name="F:Abacaxi.Trees.RedBlackTreeNodeColor.Red">
            <summary>
                The color red.
            </summary>
        </member>
        <member name="F:Abacaxi.Trees.RedBlackTreeNodeColor.Black">
            <summary>
                The color black.
            </summary>
        </member>
        <member name="T:Abacaxi.Trees.TreeTraversalMode">
            <summary>
                Defines the three traversal/enumeration modes that can be used on trees.
            </summary>
        </member>
        <member name="F:Abacaxi.Trees.TreeTraversalMode.InOrder">
            <summary>
                In-order traversal (left subtree, node, then right subtree).
            </summary>
        </member>
        <member name="F:Abacaxi.Trees.TreeTraversalMode.PreOrder">
            <summary>
                Pre-order traversal (node, left subtree, then right subtree).
            </summary>
        </member>
        <member name="F:Abacaxi.Trees.TreeTraversalMode.PostOrder">
            <summary>
                Post-order traversal (node, right subtree, then left subtree).
            </summary>
        </member>
        <member name="T:Abacaxi.ZArray">
            <summary>
                Class exposes one static method used to compute a Z-Array of a sequence.
            </summary>
        </member>
        <member name="M:Abacaxi.ZArray.Construct``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Computes the Z-array for the given <paramref name="sequence" />.
            </summary>
            <typeparam name="T">The type of elements in the sequence.</typeparam>
            <param name="sequence">The sequence to compute the Z-array for.</param>
            <param name="startIndex">The start index in the sequence.</param>
            <param name="length">The length of the sequence.</param>
            <param name="comparer">The comparer.</param>
            <returns>A new, computed Z-array (of integers).</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="comparer" /> ic <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="sequence" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when the combination of <paramref name="startIndex" /> and
                <paramref name="length" /> is out of bounds.
            </exception>
        </member>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
                Indicates that the value of the marked element could be <c>null</c> sometimes,
                so the check for <c>null</c> is necessary before its usage.
            </summary>
            <example>
                <code>
            [CanBeNull] object Test() => null;
            
            void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
                Indicates that the value of the marked element could never be <c>null</c>.
            </summary>
            <example>
                <code>
            [NotNull] object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.ItemNotNullAttribute">
            <summary>
                Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
                and Lazy classes to indicate that the value of a collection item, of the Task.Result property
                or of the Lazy.Value property can never be null.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ItemCanBeNullAttribute">
            <summary>
                Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
                and Lazy classes to indicate that the value of a collection item, of the Task.Result property
                or of the Lazy.Value property can be null.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
                Indicates that the marked method builds string by format pattern and (optional) arguments.
                Parameter, which contains format string, should be given in constructor. The format string
                should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" />-like form.
            </summary>
            <example>
                <code>
            [StringFormatMethod("message")]
            void ShowError(string message, params object[] args) { /* do something */ }
            
            void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code>
            </example>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
                Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:JetBrains.Annotations.ValueProviderAttribute">
            <summary>
                For a parameter that is expected to be one of the limited set of values.
                Specify fields of which type should be used as values for this parameter.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
                Indicates that the function argument should be string literal and match one
                of the parameters of the caller function. For example, ReSharper annotates
                the parameter of <see cref="T:System.ArgumentNullException" />.
            </summary>
            <example>
                <code>
            void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute">
            <summary>
                Indicates that the method is contained in a type that implements
                <c>System.ComponentModel.INotifyPropertyChanged</c> interface and this method
                is used to notify that some property value changed.
            </summary>
            <remarks>
                The method should be non-static and conform to one of the supported signatures:
                <list>
                    <item>
                        <c>NotifyChanged(string)</c>
                    </item>
                    <item>
                        <c>NotifyChanged(params string[])</c>
                    </item>
                    <item>
                        <c>NotifyChanged{T}(Expression{Func{T}})</c>
                    </item>
                    <item>
                        <c>NotifyChanged{T,U}(Expression{Func{T,U}})</c>
                    </item>
                    <item>
                        <c>SetProperty{T}(ref T, T, string)</c>
                    </item>
                </list>
            </remarks>
            <example>
                <code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
             
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               string _name;
             
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
                Examples of generated notifications:
                <list>
                    <item>
                        <c>NotifyChanged("Property")</c>
                    </item>
                    <item>
                        <c>NotifyChanged(() =&gt; Property)</c>
                    </item>
                    <item>
                        <c>NotifyChanged((VM x) =&gt; x.Property)</c>
                    </item>
                    <item>
                        <c>SetProperty(ref myField, value, "Property")</c>
                    </item>
                </list>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.ContractAnnotationAttribute">
            <summary>
                Describes dependency between method input and output.
            </summary>
            <syntax>
                <p>Function Definition Table syntax:</p>
                <list>
                    <item>FDT      ::= FDTRow [;FDTRow]*</item>
                    <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
                    <item>Input    ::= ParameterName: Value [, Input]*</item>
                    <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
                    <item>Value    ::= true | false | null | notnull | canbenull</item>
                </list>
                If method has single input parameter, it's name could be omitted.<br />
                Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same) for method output
                means that the methos doesn't return normally (throws or terminates the process).<br />
                Value <c>canbenull</c> is only applicable for output parameters.<br />
                You can use multiple <c>[ContractAnnotation]</c> for each FDT row, or use single attribute
                with rows separated by semicolon. There is no notion of order rows, all rows are checked
                for applicability and applied per each program state tracked by R# analysis.<br />
            </syntax>
            <examples>
                <list>
                    <item>
                        <code>
            [ContractAnnotation("=&gt; halt")]
            public void TerminationMethod()
            </code>
                    </item>
                    <item>
                        <code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code>
                    </item>
                    <item>
                        <code>
            [ContractAnnotation("s:null =&gt; true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code>
                    </item>
                    <item>
                        <code>
            // A method that returns null if the parameter is null,
            // and not null if the parameter is not null
            [ContractAnnotation("null =&gt; null; notnull =&gt; notnull")]
            public object Transform(object data)
            </code>
                    </item>
                    <item>
                        <code>
            [ContractAnnotation("=&gt; true, result: notnull; =&gt; false, result: null")]
            public bool TryParse(string s, out Person result)
            </code>
                    </item>
                </list>
            </examples>
        </member>
        <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
            <summary>
                Indicates that marked element should be localized or not.
            </summary>
            <example>
                <code>
            [LocalizationRequiredAttribute(true)]
            class Foo {
              string str = "my string"; // Warning: Localizable string
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
                Indicates that the value of the marked type (or its derivatives)
                cannot be compared using '==' or '!=' operators and <c>Equals()</c>
                should be used instead. However, using '==' or '!=' for comparison
                with <c>null</c> is always permitted.
            </summary>
            <example>
                <code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            
            class UsesNoEquality {
              void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
            <summary>
                When applied to a target attribute, specifies a requirement for any type marked
                with the target attribute to implement or inherit specific type or types.
            </summary>
            <example>
                <code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            class ComponentAttribute : Attribute { }
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            class MyComponent : IComponent { }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
                Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
                so this symbol will not be marked as unused (as well as by other usage inspections).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
                Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes
                as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
                Indicates implicit instantiation of a type with fixed constructor signature.
                That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type.</summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
                Specify what is considered used implicitly when marked
                with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute" /> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute" />.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used.</summary>
        </member>
        <member name="T:JetBrains.Annotations.PublicAPIAttribute">
            <summary>
                This attribute is intended to mark publicly available API
                which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
                Tells code analysis engine if the parameter is completely handled when the invoked method is on stack.
                If the parameter is a delegate, indicates that delegate is executed while the method is executed.
                If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
            <summary>
                Indicates that a method does not make any observable state changes.
                The same as <c>System.Diagnostics.Contracts.PureAttribute</c>.
            </summary>
            <example>
                <code>
            [Pure] int Multiply(int x, int y) => x * y;
            
            void M() {
              Multiply(123, 42); // Waring: Return value of pure method is not used
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.MustUseReturnValueAttribute">
            <summary>
                Indicates that the return value of method invocation must be used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ProvidesContextAttribute">
            <summary>
                Indicates the type member or parameter of some type, that should be used instead of all other ways
                to get the value that type. This annotation is useful when you have some "context" value evaluated
                and stored somewhere, meaning that all other ways to get this value must be consolidated with existing one.
            </summary>
            <example>
                <code>
            class Foo {
              [ProvidesContext] IBarService _barService = ...;
            
              void ProcessNode(INode node) {
                DoSomething(node, node.GetGlobalServices().Bar);
                //              ^ Warning: use value of '_barService' field
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.PathReferenceAttribute">
            <summary>
                Indicates that a parameter is a path to a file or a folder within a web project.
                Path can be relative or absolute, starting from web root (~).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.SourceTemplateAttribute">
            <summary>
                An extension method marked with this attribute is processed by ReSharper code completion
                as a 'Source Template'. When extension method is completed over some expression, it's source code
                is automatically expanded like a template at call site.
            </summary>
            <remarks>
                Template method body can contain valid source code and/or special comments starting with '$'.
                Text inside these comments is added as source code when the template is applied. Template parameters
                can be used either as additional method parameters or as identifiers wrapped in two '$' signs.
                Use the <see cref="T:JetBrains.Annotations.MacroAttribute" /> attribute to specify macros for parameters.
            </remarks>
            <example>
                In this example, the 'forEach' method is a source template available over all values
                of enumerable types, producing ordinary C# 'foreach' statement and placing caret inside block:
                <code>
            [SourceTemplate]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; xs) {
              foreach (var x in xs) {
                 //$ $END$
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.MacroAttribute">
            <summary>
                Allows specifying a macro for a parameter of a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see>.
            </summary>
            <remarks>
                You can apply the attribute on the whole method or on any of its additional parameters. The macro expression
                is defined in the <see cref="P:JetBrains.Annotations.MacroAttribute.Expression" /> property. When applied on a method, the target
                template parameter is defined in the <see cref="P:JetBrains.Annotations.MacroAttribute.Target" /> property. To apply the macro silently
                for the parameter, set the <see cref="P:JetBrains.Annotations.MacroAttribute.Editable" /> property value = -1.
            </remarks>
            <example>
                Applying the attribute on a source template method:
                <code>
            [SourceTemplate, Macro(Target = "item", Expression = "suggestVariableName()")]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; collection) {
              foreach (var item in collection) {
                //$ $END$
              }
            }
            </code>
                Applying the attribute on a template method parameter:
                <code>
            [SourceTemplate]
            public static void something(this Entity x, [Macro(Expression = "guid()", Editable = -1)] string newguid) {
              /*$ var $x$Id = "$newguid$" + x.ToString();
              x.DoSomething($x$Id); */
            }
            </code>
            </example>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Expression">
            <summary>
                Allows specifying a macro that will be executed for a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see>
                parameter when the template is expanded.
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Editable">
            <summary>
                Allows specifying which occurrence of the target parameter becomes editable when the template is deployed.
            </summary>
            <remarks>
                If the target parameter is used several times in the template, only one occurrence becomes editable;
                other occurrences are changed synchronously. To specify the zero-based index of the editable occurrence,
                use values >= 0. To make the parameter non-editable when the template is expanded, use -1.
            </remarks>
            >
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Target">
            <summary>
                Identifies the target parameter of a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see> if the
                <see cref="T:JetBrains.Annotations.MacroAttribute" /> is applied on a template method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
                is an MVC action. If applied to a method, the MVC action name is calculated
                implicitly from the context. Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcAreaAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcControllerAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is
                an MVC controller. If applied to a method, the MVC controller name is calculated
                implicitly from the context. Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcMasterAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that a parameter is an MVC Master. Use this attribute
                for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcModelTypeAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that a parameter is an MVC model type. Use this attribute
                for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, Object)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcPartialViewAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC
                partial view. If applied to a method, the MVC partial view name is calculated implicitly
                from the context. Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcSuppressViewErrorAttribute">
            <summary>
                ASP.NET MVC attribute. Allows disabling inspections for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
                Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcTemplateAttribute">
            <summary>
                ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
                Use this attribute for custom wrappers similar to
                <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
                is an MVC view component. If applied to a method, the MVC view name is calculated implicitly
                from the context. Use this attribute for custom wrappers similar to
                <c>System.Web.Mvc.Controller.View(Object)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewComponentAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
                is an MVC view component name.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewComponentViewAttribute">
            <summary>
                ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
                is an MVC view component view. If applied to a method, the MVC view component view name is default.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionSelectorAttribute">
            <summary>
                ASP.NET MVC attribute. When applied to a parameter of an attribute,
                indicates that this parameter is an MVC action name.
            </summary>
            <example>
                <code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.RazorSectionAttribute">
            <summary>
                Razor attribute. Indicates that a parameter or a method is a Razor section.
                Use this attribute for custom wrappers similar to
                <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CollectionAccessAttribute">
            <summary>
                Indicates how method, constructor invocation or property access
                over collection type affects content of the collection.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.None">
            <summary>Method does not use or modify content of the collection.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.Read">
            <summary>Method only reads content of the collection but does not modify it.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.ModifyExistingContent">
            <summary>Method can change content of the collection but does not add new elements.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.UpdatedContent">
            <summary>Method can add new elements to the collection.</summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionMethodAttribute">
            <summary>
                Indicates that the marked method is assertion method, i.e. it halts control flow if
                one of the conditions is satisfied. To set the condition, mark one of the parameters with
                <see cref="T:JetBrains.Annotations.AssertionConditionAttribute" /> attribute.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionAttribute">
            <summary>
                Indicates the condition parameter of the assertion method. The method itself should be
                marked by <see cref="T:JetBrains.Annotations.AssertionMethodAttribute" /> attribute. The mandatory argument of
                the attribute is the assertion type.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionType">
            <summary>
                Specifies assertion type. If the assertion method argument satisfies the condition,
                then the execution continues. Otherwise, execution is assumed to be halted.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_TRUE">
            <summary>Marked parameter should be evaluated to true.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_FALSE">
            <summary>Marked parameter should be evaluated to false.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NULL">
            <summary>Marked parameter should be evaluated to null value.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>Marked parameter should be evaluated to not null value.</summary>
        </member>
        <member name="T:JetBrains.Annotations.TerminatesProgramAttribute">
            <summary>
                Indicates that the marked method unconditionally terminates control flow execution.
                For example, it could unconditionally throw exception.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.LinqTunnelAttribute">
            <summary>
                Indicates that method is pure LINQ method, with postponed enumeration (like Enumerable.Select,
                .Where). This annotation allows inference of [InstantHandle] annotation for parameters
                of delegate type by analyzing LINQ method chains.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NoEnumerationAttribute">
            <summary>
                Indicates that IEnumerable, passed as parameter, is not enumerated.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.RegexPatternAttribute">
            <summary>
                Indicates that parameter is regular expression pattern.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NoReorderAttribute">
            <summary>
                Prevents the Member Reordering feature from tossing members of the marked class.
            </summary>
            <remarks>
                The attribute must be mentioned in your member reordering patterns
            </remarks>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemsControlAttribute">
            <summary>
                XAML attribute. Indicates the type that has <c>ItemsSource</c> property and should be treated
                as <c>ItemsControl</c>-derived type, to enable inner items <c>DataContext</c> type resolve.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemBindingOfItemsControlAttribute">
            <summary>
                XAML attribute. Indicates the property of some <c>BindingBase</c>-derived type, that
                is used to bind some item of <c>ItemsControl</c>-derived type. This annotation will
                enable the <c>DataContext</c> type resolve for XAML bindings for such properties.
            </summary>
            <remarks>
                Property should have the tree ancestor of the <c>ItemsControl</c> type or
                marked with the <see cref="T:JetBrains.Annotations.XamlItemsControlAttribute" /> attribute.
            </remarks>
        </member>
    </members>
</doc>
